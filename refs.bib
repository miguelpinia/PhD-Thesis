@INPROCEEDINGS{1302951,
  author =       {D. A. {Bader} and G. {Cong}},
  booktitle =    {18th International Parallel and Distributed
                  Processing Symposium, 2004. Proceedings.},
  title =        {A fast, parallel spanning tree algorithm for
                  symmetric multiprocessors},
  year =         2004,
  pages =        {38-},
  abstract =     {Summary form only given. We focus on implementing
                  parallel spanning tree algorithms on SMPs. Spanning
                  tree is an important problem in the sense that it is
                  the building block for many other parallel graph
                  algorithms and also because it is representative of
                  a large class of irregular combinatorial problems
                  that have simple and efficient sequential
                  implementations and fast PRAM algorithms, but often
                  have no known efficient parallel
                  implementations. Experimental studies have been
                  conducted on related problems (minimum spanning tree
                  and connected components) using parallel computers,
                  but only achieved reasonable speedup on regular
                  graph topologies that can be implicitly partitioned
                  with good locality features or on very dense graphs
                  with limited numbers of vertices. We present a new
                  randomized algorithm and implementation with
                  superior performance that for the first-time
                  achieves parallel speedup on arbitrary graphs (both
                  regular and irregular topologies) when compared with
                  the best sequential implementation for finding a
                  spanning tree. This new algorithm uses several
                  techniques to give an expected running time that
                  scales linearly with the number p of processors for
                  suitably large inputs (n>p/sup 2/). As the spanning
                  tree problem is notoriously hard for any parallel
                  implementation to achieve reasonable speedup, our
                  study may shed new light on implementing PRAM
                  algorithms for shared-memory parallel computers. The
                  source code for these algorithms is freely-available
                  from our Web site hpc.ece.unm.edu. This work was
                  supported in part by NSF Grants CAREER ACI-00-93039,
                  ITR ACI-00-81404, DEB-99-10123, ITR EIA-01-21377,
                  Biocomplexity DEB-01-20709, and ITR EF/BIO
                  03-31654.},
  keywords =     {parallel algorithms;trees (mathematics);randomised
                  algorithms;concurrency theory;shared memory
                  systems;parallel machines;parallel spanning tree
                  algorithm;symmetric multiprocessors;parallel graph
                  algorithms;irregular combinatorial problems;PRAM
                  algorithms;minimum spanning tree;connected
                  components;parallel computers;regular graph
                  topologies;dense graphs;randomized
                  algorithm;arbitrary graphs;shared-memory parallel
                  computers;source code;Tree graphs;Phase change
                  random access memory;Concurrent computing;Clustering
                  algorithms;Topology;Computer
                  architecture;Engineering profession;Ear;Testing;Data
                  structures},
  doi =          {10.1109/IPDPS.2004.1302951},
  ISSN =         {null},
  month =        {April}
}

@book{2314495,
  title =        {Hands-On System Programming with C++ Build robust
                  and concurrent Unix and Linux systems with C++17},
  author =       {Dr. Rian Quinn},
  publisher =    {Packt Publishing},
  isbn =         9781789137880,
  year =         2018,
  url =
                  {http://gen.lib.rus.ec/book/index.php?md5=c6009653c31637544b70b4c63c317780}
}

@book{2430028,
  title =        {C++17 The Complete Guide},
  author =       {Nicolai M. Josuttis},
  publisher =    {Lean},
  isbn =         {396730017X, 9783967300178},
  year =         2019,
  url =
                  {http://gen.lib.rus.ec/book/index.php?md5=3f232898efb332044c9335ea515fdd0f}
}

@book{2526482,
  title =        {Expert C++: Become a proficient programmer by
                  learning coding best practices with C++17 and
                  C++20's latest features},
  author =       {Vardan Grigoryan; Shunguang Wu},
  publisher =    {Packt Publishing Ltd},
  isbn =         {9781838554767,1838554769},
  year =         2020,
  url =
                  {http://gen.lib.rus.ec/book/index.php?md5=BF24063EF5E864AE307A3467A090B5AD}
}

@book{2526517,
  title =        {The C++ Standard Library (2d Ed., including C++ 17)},
  author =       {Rainer Grimm},
  publisher =    {Leanpub},
  isbn =         {183921662X,9781839216626},
  year =         2018,
  url =
                  {http://gen.lib.rus.ec/book/index.php?md5=927AF37DC1C7D3C11B7B21AF24E2D8BF}
}

@INPROCEEDINGS{8887310,
  author =       {D. {Li} and J. {Liu} and Z. {Tang} and Q. {Wu} and
                  Z. {Guan}},
  booktitle =    {2019 18th IEEE International Conference On Trust,
                  Security And Privacy In Computing And
                  Communications/13th IEEE International Conference On
                  Big Data Science And Engineering
                  (TrustCom/BigDataSE)},
  title =        {AgentChain: A Decentralized Cross-Chain Exchange
                  System},
  year =         2019,
  pages =        {491-498},
  keywords =     {Blockchain;Bitcoin;Smart contracts;Waste
                  materials;Blockchain;Cryptocurrency;Cross-chain;Interoperability;Multi-Signature},
  doi =          {10.1109/TrustCom/BigDataSE.2019.00072},
  ISSN =         {2324-898X},
  month =        {Aug}
}

@inproceedings{herlihy.swaps.2018,
  author =       {Herlihy, Maurice},
  title =        {Atomic Cross-Chain Swaps},
  year =         2018,
  isbn =         9781450357951,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =
                  {https://doi-org.pbidi.unam.mx:2443/10.1145/3212734.3212736},
  doi =          {10.1145/3212734.3212736},
  booktitle =    {Proceedings of the 2018 ACM Symposium on Principles
                  of Distributed Computing},
  pages =        {245–254},
  numpages =     10,
  keywords =     {blockchain, atomic swap},
  location =     {Egham, United Kingdom},
  series =       {PODC ’18}
}

@article{herlihy.liskov.deal.2019,
  author =       {Herlihy, Maurice and Liskov, Barbara and Shrira,
                  Liuba},
  title =        {Cross-Chain Deals and Adversarial Commerce},
  year =         2019,
  issue_date =   {October 2019},
  publisher =    {VLDB Endowment},
  volume =       13,
  number =       2,
  issn =         {2150-8097},
  url =
                  {https://doi-org.pbidi.unam.mx:2443/10.14778/3364324.3364326},
  doi =          {10.14778/3364324.3364326},
  journal =      {Proc. VLDB Endow.},
  month =        oct,
  pages =        {100–113},
  numpages =     14
}

@book{aggarwal2015data,
  title =        {Data mining: the textbook},
  author =       {Aggarwal, Charu C},
  year =         2015,
  publisher =    {Springer}
}

@article{aggarwal2018neural,
  title =        {Neural networks and deep learning},
  author =       {Aggarwal, Charu C},
  journal =      {Springer},
  volume =       10,
  pages =        {978--3},
  year =         2018,
  publisher =    {Springer}
}

@misc{arm2020consensus,
  title =        {What Can Be Done with Consensus Number One: Relaxed
                  Queues and Stacks},
  author =       {Armando Castañeda and Sergio Rajsbaum and Michel
                  Raynal},
  year =         2020,
  eprint =       {2005.05427},
  archivePrefix ={arXiv},
  primaryClass = {cs.DC}
}
@unknown{atomic_commitment_across_blockchains,
  author =       {Zakhary, Victor and Agrawal, Divyakant and Abbadi,
                  Amr},
  year =         {2019},
  month =        {05},
  pages =        {},
  title =        {Atomic Commitment Across Blockchains}
}

@inproceedings{basketqueue2007,
  author =       {Hoffman, Moshe and Shalev, Ori and Shavit, Nir},
  title =        {The Baskets Queue},
  year =         2007,
  isbn =         {354077095X},
  publisher =    {Springer-Verlag},
  address =      {Berlin, Heidelberg},
  abstract =     {FIFO Queues have over the years been the subject of
                  significant research. Such queues are used as
                  buffers both in a variety of applications, and in
                  recent years as a key tool in buffering data in high
                  speed communication networks.Overall, the most
                  popular dynamic-memory lock-free FIFO queue
                  algorithm in the literature remains the MS-queue
                  algorithm of Michael and Scott. Unfortunately, this
                  algorithm, as well as many others, offers no more
                  parallelism than that provided by allowing
                  concurrent accesses to the head and tail. In this
                  paper we present the Baskets Queue - a new, highly
                  concurrent lock-free linearizable dynamic memory
                  FIFO queue. The Baskets Queue introduces a new form
                  of parallelism among enqueue operations that creates
                  baskets of mixed-order items instead of the standard
                  totally ordered list. The operations in different
                  baskets can be executed in parallel. Surprisingly
                  however, the end result is a linearizable FIFO
                  queue, and in fact, we show that a basket queue
                  based on the MS-queue outperforms the original
                  MS-queue algorithm in various benchmarks.},
  booktitle =    {Proceedings of the 11th International Conference on
                  Principles of Distributed Systems},
  pages =        {401–414},
  numpages =     14,
  keywords =     {non-blocking, compare and swap, CAS,
                  synchronization, FIFO queue, concurrent data
                  structures, lock-free},
  location =     {Guadeloupe, French West Indies},
  series =       {OPODIS'07}
}

@book{BayesianEssentialsWithR,
  title =        {Bayesian essentials with R},
  author =       {Marin, Jean-Michel and Robert, Christian P},
  volume =       48,
  year =         2014,
  publisher =    {Springer}
}

@misc{belchior2020survey,
  title =        {A Survey on Blockchain Interoperability: Past,
                  Present, and Future Trends},
  author =       {Rafael Belchior and André Vasconcelos and Sérgio
                  Guerreiro and Miguel Correia},
  year =         2020,
  eprint =       {2005.14282},
  archivePrefix ={arXiv},
  primaryClass = {cs.DC}
}

@article{nakamoto.bitcoin.2008,
  title =        {Bitcoin whitepaper},
  author =       {Nakamoto, Satoshi},
  journal =      {URL: https://bitcoin. org/bitcoin. pdf-(Дата
                  обращения: 17.07. 2019)},
  year =         2008
}

@misc{ruan2019blockchains,
  title =        {Blockchains and Distributed Databases: a Twin Study},
  author =       {Pingcheng Ruan and Gang Chen and Tien Tuan Anh Dinh
                  and Qian Lin and Dumitrel Loghin and Beng Chin Ooi
                  and Meihui Zhang},
  year =         2019,
  eprint =       {1910.01310},
  archivePrefix ={arXiv},
  primaryClass = {cs.DB}
}

@misc{dinh2019blueprint,
  title =        {A Blueprint for Interoperable Blockchains},
  author =       {Tien Tuan Anh Dinh and Anwitaman Datta and Beng Chin
                  Ooi},
  year =         2019,
  eprint =       {1910.00985},
  archivePrefix ={arXiv},
  primaryClass = {cs.DB}
}

@misc{cryptoeprint:2016:701,
  author =       {Matthew Green and Ian Miers},
  title =        {Bolt: Anonymous Payment Channels for Decentralized
                  Currencies},
  howpublished = {Cryptology ePrint Archive, Report 2016/701},
  year =         2016,
  note =         {\url{https://eprint.iacr.org/2016/701}},
}

@book{bramer2007principles,
  title =        {Principles of data mining},
  author =       {Bramer, Max},
  volume =       180,
  year =         2007,
  publisher =    {Springer}
}

@misc{bres2020blockchain,
  title =        {Blockchain is Watching You: Profiling and
                  Deanonymizing Ethereum Users},
  author =       {Ferenc Béres and István András Seres and András
                  A. Benczúr and Mikerah Quintyne-Collins},
  year =         2020,
  eprint =       {2005.14051},
  archivePrefix ={arXiv},
  primaryClass = {cs.CR}
}

@book{butenhof1997programming,
  title =        {Programming with POSIX threads},
  author =       {Butenhof, David R},
  year =         1997,
  publisher =    {Addison-Wesley Professional}
}

@book{buttlar2013pthreads,
  title =        {PThreads Programming: a POSIX Standard for better
                  multiprocessing},
  author =       {BUTTLAR, DICK AUTOR and Nichols, Bradford and
                  Buttlar, Dick and Farrell, Jacqueline and Farrell,
                  Jackie},
  year =         2013,
  publisher =    {" O'Reilly Media, Inc."}
}

@article{carlsson2009topology,
  title =        {Topology and data},
  author =       {Carlsson, Gunnar},
  journal =      {Bulletin of the American Mathematical Society},
  volume =       46,
  number =       2,
  pages =        {255--308},
  year =         2009
}

@book{chapman2008using,
  title =        {Using OpenMP: portable shared memory parallel
                  programming},
  author =       {Chapman, Barbara and Jost, Gabriele and Van Der Pas,
                  Ruud},
  volume =       10,
  year =         2008,
  publisher =    {MIT press}
}

@inproceedings{circular.work.stealing,
  author =       {Chase, David and Lev, Yossi},
  title =        {Dynamic Circular Work-Stealing Deque},
  year =         2005,
  isbn =         1581139861,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/1073970.1073974},
  doi =          {10.1145/1073970.1073974},
  booktitle =    {Proceedings of the Seventeenth Annual ACM Symposium
                  on Parallelism in Algorithms and Architectures},
  pages =        {21–28},
  numpages =     8,
  keywords =     {load balancing, lock-free, work stealing, deque},
  location =     {Las Vegas, Nevada, USA},
  series =       {SPAA ’05}
}

@article{Connected_Components_on_Distributed_Memory_Machine,
  author =       {Krishnamurthy, Arvind and Lumetta, Steven and
                  Culler, David and Yelick, Katherine},
  year =         1996,
  month =        03,
  title =        {Connected Components on Distributed Memory Machines},
  volume =       30,
  journal =      {DIMACS Implementation Challenge}
}

@misc{cryptoeprint:2019:1128,
  author =       {Alexei Zamyatin and Mustafa Al-Bassam and Dionysis
                  Zindros and Eleftherios Kokoris-Kogias and Pedro
                  Moreno-Sanchez and Aggelos Kiayias and William
                  J. Knottenbelt},
  title =        {SoK: Communication Across Distributed Ledgers},
  howpublished = {Cryptology ePrint Archive, Report 2019/1128},
  year =         2019,
  note =         {\url{https://eprint.iacr.org/2019/1128}},
}

@inproceedings{10.1145.181014.181021,
  author =       {Greiner, John},
  title =        {A Comparison of Parallel Algorithms for Connected
                  Components},
  year =         1994,
  isbn =         0897916719,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/181014.181021},
  doi =          {10.1145/181014.181021},
  booktitle =    {Proceedings of the Sixth Annual ACM Symposium on
                  Parallel Algorithms and Architectures},
  pages =        {16–25},
  numpages =     10,
  location =     {Cape May, New Jersey, USA},
  series =       {SPAA ’94}
}

@Article{Guerraoui_2019,
  author =       {Guerraoui, Rachid and Kuznetsov, Petr and Monti,
                  Matteo and Pavlovič, Matej and Seredinschi,
                  Dragos-Adrian},
  title =        {The Consensus Number of a Cryptocurrency},
  year =         2019,
  doi =          {10.1145/3293611.3331589},
  url =          {http://dx.doi.org/10.1145/3293611.3331589},
  isbn =         9781450362177,
  journal =      {Proceedings of the 2019 ACM Symposium on Principles
                  of Distributed Computing - PODC ’19},
  publisher =    {ACM Press}
}

@book{cormen2009introduction,
  title =        {Introduction to algorithms},
  author =       {Cormen, Thomas H and Leiserson, Charles E and
                  Rivest, Ronald L and Stein, Clifford},
  year =         2009,
  publisher =    {MIT press}
}
@Online{1905.09985v2,
  author =       {Soichiro Imoto AND Yuichi Sudo AND Hirotsugu
                  Kakugawa AND Toshimitsu Masuzawa},
  title =        {{Atomic Cross-Chain Swaps with Improved Space and
                  Local Time Complexity}},
  year =         2019,
  archiveprefix ={arXiv},
  eprint =       {1905.09985v2},
  primaryclass = {cs.DC}
}
@Online{ranchal-pedrosa19:platy,
  author =       {Alejandro Ranchal-Pedrosa AND Vincent Gramoli},
  title =        {{Platypus: a Partially Synchronous Offchain Protocol
                  for Blockchains}},
  year =         2019,
  archiveprefix ={arXiv},
  eprint =       {1907.03730v1},
  primaryclass = {cs.DC}
}

@misc{cryptoeprint2020627,
  author =       {Duke Leto and The Hush Developers},
  title =        {Attacking Zcash For Fun And Profit},
  howpublished = {Cryptology ePrint Archive, Report 2020/627},
  year =         2020,
  note =         {\url{https://eprint.iacr.org/2020/627}},
}

@misc{dembo2020race,
  title =        {Everything is a Race and Nakamoto Always Wins},
  author =       {Amir Dembo and Sreeram Kannan and Ertem Nusret Tas
                  and David Tse and Pramod Viswanath and Xuechao Wang
                  and Ofer Zeitouni},
  year =         2020,
  eprint =       {2005.10484},
  archivePrefix ={arXiv},
  primaryClass = {cs.CR}
}

@misc{wang2020distributed,
  title =        {Distributed Nonblocking Commit Protocols for
                  Many-Party Cross-Blockchain Transactions},
  author =       {Xinying Wang and Olamide Timothy Tawose and Feng Yan
                  and Dongfang Zhao},
  year =         2020,
  eprint =       {2001.01174},
  archivePrefix ={arXiv},
  primaryClass = {cs.DB}
}

@inproceedings{executing_programs_tree,
  author =       {Burton, F. Warren and Sleep, M. Ronan},
  title =        {Executing Functional Programs on a Virtual Tree of
                  Processors},
  year =         1981,
  isbn =         0897910605,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =
                  {https://doi-org.pbidi.unam.mx:2443/10.1145/800223.806778},
  doi =          {10.1145/800223.806778},
  booktitle =    {Proceedings of the 1981 Conference on Functional
                  Programming Languages and Computer Architecture},
  pages =        {187–194},
  numpages =     8,
  location =     {Portsmouth, New Hampshire, USA},
  series =       {FPCA ’81}
}

@article{ppopp2013x86queues,
  author =       {Morrison, Adam and Afek, Yehuda},
  title =        {Fast Concurrent Queues for X86 Processors},
  year =         2013,
  issue_date =   {August 2013},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       48,
  number =       8,
  issn =         {0362-1340},
  url =          {https://doi.org/10.1145/2517327.2442527},
  doi =          {10.1145/2517327.2442527},
  abstract =     {Conventional wisdom in designing concurrent data
                  structures is to use the most powerful
                  synchronization primitive, namely compare-and-swap
                  (CAS), and to avoid contended hot spots. In building
                  concurrent FIFO queues, this reasoning has led
                  researchers to propose combining-based concurrent
                  queues.This paper takes a different approach,
                  showing how to rely on fetch-and-add (F&A), a less
                  powerful primitive that is available on x86
                  processors, to construct a nonblocking (lock-free)
                  linearizable concurrent FIFO queue which, despite
                  the F&A being a contended hot spot, outperforms
                  combining-based implementations by 1.5x to 2.5x in
                  all concurrency levels on an x86 server with four
                  multicore processors, in both single-processor and
                  multi-processor executions.},
  journal =      {SIGPLAN Not.},
  month =        feb,
  pages =        {103–112},
  numpages =     10,
  keywords =     {nonblocking algorithm, fetch-and-add, concurrent
                  queue}
}

@book{forsyth2018probability,
  title =        {Probability and statistics for computer science},
  author =       {Forsyth, David},
  year =         2018,
  publisher =    {Springer}
}

@book{foundations_of_theory_information,
  title =        {Mathematical foundations of information theory},
  author =       {Khinchin, A Ya},
  year =         2013,
  publisher =    {Courier Corporation}
}

@book{galowicz2017c++,
  title =        {C++ 17 STL Cookbook},
  author =       {Galowicz, Jacek},
  year =         2017,
  publisher =    {Packt Publishing Ltd}
}

@techreport{hal-02634752,
  TITLE =        {{Game theoretical framework for analyzing
                  Blockchains Robustness}},
  AUTHOR =       {Zappal{\`a}, Paolo and Belotti, Marianna and
                  Potop-Butucaru, Maria and Secci, Stefano},
  URL =          {https://hal.archives-ouvertes.fr/hal-02634752},
  TYPE =         {Research Report},
  INSTITUTION =  {{Sorbonne Universit{\'e}, CNRS, Laboratoire
                  d'Informatique de Paris 6, LIP6, Paris, France}},
  YEAR =         2020,
  MONTH =        May,
  PDF =
                  {https://hal.archives-ouvertes.fr/hal-02634752/file/Tech_Report_LN.pdf},
  HAL_ID =       {hal-02634752},
  HAL_VERSION =  {v1},
}

@inproceedings{DBLP_conf_podc_Herlihy88,
  author =       {Maurice Herlihy},
  editor =       {Danny Dolev},
  title =        {Impossibility and Universality Results for Wait-Free
                  Synchronization},
  booktitle =    {Proceedings of the Seventh Annual {ACM} Symposium on
                  Principles of Distributed Computing, Toronto,
                  Ontario, Canada, August 15-17, 1988},
  pages =        {276--290},
  publisher =    {{ACM}},
  year =         1988,
  url =          {https://doi.org/10.1145/62546.62593},
  doi =          {10.1145/62546.62593},
  timestamp =    {Wed, 14 Nov 2018 10:51:56 +0100},
  biburl =       {https://dblp.org/rec/conf/podc/Herlihy88.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_toplas_Herlihy91,
  author =       {Maurice Herlihy},
  title =        {Wait-Free Synchronization},
  journal =      {{ACM} Trans. Program. Lang. Syst.},
  volume =       13,
  number =       1,
  pages =        {124--149},
  year =         1991,
  url =          {https://doi.org/10.1145/114005.102808},
  doi =          {10.1145/114005.102808},
  timestamp =    {Wed, 14 Nov 2018 10:30:40 +0100},
  biburl =       {https://dblp.org/rec/journals/toplas/Herlihy91.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{horton2018beginning,
  title =        {Beginning C++ 17: From Novice to Professional},
  author =       {Horton, Ivor and Van Weert, Peter},
  year =         2018,
  publisher =    {Apress}
}

@inproceedings{maged.vechev.2009,
  author =       {Maged M. Michael and Martin T. Vechev and Vijay
                  A. Saraswat},
  editor =       {Daniel A. Reed and Vivek Sarkar},
  title =        {Idempotent work stealing},
  booktitle =    {Proceedings of the 14th {ACM} {SIGPLAN} Symposium on
                  Principles and Practice of Parallel Programming,
                  {PPOPP} 2009, Raleigh, NC, USA, February 14-18,
                  2009},
  pages =        {45--54},
  publisher =    {{ACM}},
  year =         2009,
  url =          {https://doi.org/10.1145/1504176.1504186},
  doi =          {10.1145/1504176.1504186},
  timestamp =    {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl =       {https://dblp.org/rec/conf/ppopp/MichaelVS09.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@incollection{igual2017introduction,
  title =        {Introduction to Data Science},
  author =       {Igual, Laura and Seguí, Santi},
  booktitle =    {Introduction to Data Science},
  pages =        {1--4},
  year =         2017,
  publisher =    {Springer}
}

@article{implementation_cilk5,
  author =       {Frigo, Matteo and Leiserson, Charles and Randall,
                  Keith},
  year =         1999,
  month =        02,
  title =        {The Implementation of the Cilk-5 Multithreaded
                  Language},
  volume =       33,
  journal =      {ACM SIGPLAN Notices},
  doi =          {10.1145/277650.277725}
}

@article{penetratintestingGunawan2018,
  author =       {Gunawan, Teddy and Lim, M.K. and Kartiwi, Mira and
                  Malik, N.A. and Ismail, Nanang},
  year =         2018,
  month =        11,
  pages =        {729-737},
  title =        {Penetration testing using Kali linux: SQL injection,
                  XSS, wordpres, and WPA2 attacks},
  volume =       12,
  journal =      {Indonesian Journal of Electrical Engineering and
                  Computer Science},
  doi =          {10.11591/ijeecs.v12.i2.pp729-737}
}

@book{kizza2009guide,
  title =        {Guide to computer network security},
  author =       {Kizza, Joseph Migga},
  year =         2009,
  publisher =    {Springer}
}

@inproceedings{DBLP_conf_ppopp_KoganP12,
  author =       {Alex Kogan and Erez Petrank},
  editor =       {J. Ramanujam and P. Sadayappan},
  title =        {A methodology for creating fast wait-free data
                  structures},
  booktitle =    {Proceedings of the 17th {ACM} {SIGPLAN} Symposium on
                  Principles and Practice of Parallel Programming,
                  {PPOPP} 2012, New Orleans, LA, USA, February 25-29,
                  2012},
  pages =        {141--150},
  publisher =    {{ACM}},
  year =         2012,
  url =          {https://doi.org/10.1145/2145816.2145835},
  doi =          {10.1145/2145816.2145835},
  timestamp =    {Wed, 14 Nov 2018 10:55:57 +0100},
  biburl =       {https://dblp.org/rec/conf/ppopp/KoganP12.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{kubat2017introduction,
  title =        {An introduction to machine learning},
  author =       {Kubat, Miroslav},
  volume =       2,
  year =         2017,
  publisher =    {Springer}
}

@book{laaksonen2017guide,
  title =        {Guide to Competitive Programming},
  author =       {Laaksonen, Antti},
  year =         2017,
  publisher =    {Springer}
}

@article{lamport2019time,
  author =       {Lamport, Leslie},
  title =        {Time, Clocks, and the Ordering of Events in a
                  Distributed System},
  year =         1978,
  issue_date =   {July 1978},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       21,
  number =       7,
  issn =         {0001-0782},
  url =
                  {https://doi-org.pbidi.unam.mx:2443/10.1145/359545.359563},
  doi =          {10.1145/359545.359563},
  abstract =     {The concept of one event happening before another in
                  a distributed system is examined, and is shown to
                  define a partial ordering of the events. A
                  distributed algorithm is given for synchronizing a
                  system of logical clocks which can be used to
                  totally order the events. The use of the total
                  ordering is illustrated with a method for solving
                  synchronization problems. The algorithm is then
                  specialized for synchronizing physical clocks, and a
                  bound is derived on how far out of synchrony the
                  clocks can become.},
  journal =      {Commun. ACM},
  month =        {jul},
  pages =        {558–565},
  numpages =     8,
  keywords =     {multiprocess systems, clock synchronization,
                  computer networks, distributed systems}
}

@book{lee2017foundations,
  title =        {Foundations of Programming Languages},
  author =       {Lee, Kent D},
  year =         2017,
  publisher =    {Springer}
}

@misc{lightning2016,
  title =        {The bitcoin lightning network: Scalable off-chain
                  instant payments},
  author =       {Poon, Joseph and Dryja, Thaddeus},
  year =         2016
}

@book{lin2018introductory,
  title =        {INTRODUCTORY COMPUTER FORENSICS: A hands-on
                  practical approach},
  author =       {Lin, Xiaodong},
  year =         2018,
  publisher =    {Springer}
}

@Article{lamport1979how,
  author =       {Lamport, Leslie},
  title =        {How to Make a Multiprocessor Computer That Correctly
                  Executes Multiprocess Programs},
  year =         1979,
  month =        {September},
  abstract =     {I forget what prompted me to be thinking about
                  memory caching, but it occurred to me one day that
                  multiprocessor synchronization algorithms assume
                  that each processor accesses the same word in
                  memory, but each processor actually accesses its own
                  copy in its cache.  It hardly required a
                  triple-digit IQ to realize that this could cause
                  problems.  I suppose what made this paper worth
                  reading was its simple, precise definition of
                  sequential consistency as the required correctness
                  condition.  This was not the first paper about cache
                  coherence.  However, it is the early paper most
                  often cited in the cache-coherence literature.},
  url =
                  {https://www.microsoft.com/en-us/research/publication/make-multiprocessor-computer-correctly-executes-multiprocess-programs/},
  pages =        {690-691},
  journal =      {IEEE Transactions on Computers C-28},
  volume =       9,
}

@book{massimiliano2018statistics,
  title =        {Statistics and Analysis of Scientific Data},
  author =       {MASSIMILIANO. BONAMENTE},
  year =         2018,
  publisher =    {SPRINGER}
}

@article{primer_on_memory_consistency_and_cache_coherence,
  author =       {Sorin, Daniel J. and Hill, Mark D. and Wood, David
                  A.},
  title =        {A Primer on Memory Consistency and Cache Coherence},
  journal =      {Synthesis Lectures on Computer Architecture},
  volume =       6,
  number =       3,
  pages =        {1-212},
  year =         2011,
  doi =          {10.2200/S00346ED1V01Y201104CAC016},
  URL =          {https://doi.org/10.2200/S00346ED1V01Y201104CAC016},
  eprint =       {https://doi.org/10.2200/S00346ED1V01Y201104CAC016}
}

@article{glabbeek2019cross,
  title =        "Cross-Chain Payment Protocols with Success
                  Guarantees.",
  author =       "Rob van {Glabbeek} and Vincent {Gramoli} and Pierre
                  {Tholoniat}",
  journal =      "arXiv preprint arXiv:1912.04513",
  url =          "https://academic.microsoft.com/paper/2996756942",
  year =         2019
}

@article{mooi2018market,
  title =        {Market research},
  author =       {Mooi, Erik and Sarstedt, Marko and Mooi-Reci, Irma
                  and others},
  journal =      {The process, data, and methods using stata},
  year =         2018,
  publisher =    {Springer}
}

@inproceedings{10.1145.571825.571876,
  author =       {Hendler, Danny and Shavit, Nir},
  title =        {Non-Blocking Steal-Half Work Queues},
  year =         2002,
  isbn =         1581134851,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/571825.571876},
  doi =          {10.1145/571825.571876},
  booktitle =    {Proceedings of the Twenty-First Annual Symposium on
                  Principles of Distributed Computing},
  pages =        {280–289},
  numpages =     10,
  location =     {Monterey, California},
  series =       {PODC ’02}
}

@article{non.blocking.work.stealing,
  author =       {Hendler, Danny and Lev, Yossi and Moir, Mark and
                  Shavit, Nir},
  year =         2006,
  month =        02,
  pages =        {189-207},
  title =        {A dynamic-sized nonblocking work stealing deque},
  volume =       18,
  journal =      {Distributed Computing},
  doi =          {10.1007/s00446-005-0144-5}
}

@article{o2017concise,
  title =        {Concise guide to software engineering},
  author =       {O’Regan, Gerard},
  journal =      {Concise Guide to Software Engineering, Cork,
                  Ireland: Springer},
  pages =        {131--138},
  year =         2017,
  publisher =    {Springer}
}

@book{o2017mastering,
  title =        {Mastering the C++ 17 STL: Make full use of the
                  standard library components in C++ 17},
  author =       {O'dwyer, Arthur},
  year =         2017,
  publisher =    {Packt Publishing Ltd}
}

@book{oberguggenberger2018analysis,
  title =        {Analysis for computer scientists},
  author =       {Oberguggenberger, Michael and Ostermann, Alexander},
  year =         2018,
  publisher =    {Springer}
}

@book{ogihara2018fundamentals,
  title =        {Fundamentals of Java Programming},
  author =       {Ogihara, Mitsunori},
  year =         2018,
  publisher =    {Springer}
}

@article{parallel.garbage.collection,
  author =       {Flood, Christine and Detlefs, David and Shavit, Nir
                  and Zhang, Xiaolan},
  year =         2001,
  month =        11,
  title =        {Parallel Garbage Collection for Shared Memory
                  Multiprocessors}
}

@article{fencefreework,
  author =       {Morrison, Adam and Afek, Yehuda},
  title =        {Fence-Free Work Stealing on Bounded TSO Processors},
  year =         2014,
  issue_date =   {April 2014},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       49,
  number =       4,
  issn =         {0362-1340},
  url =          {https://doi.org/10.1145/2644865.2541987},
  doi =          {10.1145/2644865.2541987},
  journal =      {SIGPLAN Not.},
  month =        feb,
  pages =        {413–426},
  numpages =     14,
  keywords =     {memory fences, work stealing, tso}
}

@inproceedings{fencefreeworkproceedings,
  author =       {Morrison, Adam and Afek, Yehuda},
  title =        {Fence-Free Work Stealing on Bounded TSO Processors},
  year =         2014,
  isbn =         9781450323055,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2541940.2541987},
  doi =          {10.1145/2541940.2541987},
  booktitle =    {Proceedings of the 19th International Conference on
                  Architectural Support for Programming Languages and
                  Operating Systems},
  pages =        {413–426},
  numpages =     14,
  keywords =     {work stealing, tso, memory fences},
  location =     {Salt Lake City, Utah, USA},
  series =       {ASPLOS ’14}
}

@book{pitt2017guide,
  title =        {Guide to Scientific Computing in C++ Secon Edition},
  author =       {Pitt-Francis, Joe and Whiteley, Jonathan},
  year =         2017,
  publisher =    {Springer}
}

@book{platzer2018logical,
  title =        {Logical foundations of cyber-physical systems},
  author =       {Platzer, André},
  year =         2018,
  publisher =    {Springer}
}

@ARTICLE{1702415,
  author =       {Lamport, Leslie},
  journal =      {IEEE Transactions on Software Engineering},
  title =        {Proving the Correctness of Multiprocess Programs},
  year =         1977,
  volume =       {SE-3},
  number =       2,
  pages =        {125-143},
  abstract =     {The inductive assertion method is generalized to
                  permit formal, machine-verifiable proofs of
                  correctness for multiprocess programs. Individual
                  processes are represented by ordinary flowcharts,
                  and no special synchronization mechanisms are
                  assumed, so the method can be applied to a large
                  class of multiprocess programs. A correctness proof
                  can be designed together with the program by a
                  hierarchical process of stepwise refinement, making
                  the method practical for larger programs. The
                  resulting proofs tend to be natural formalizations
                  of the informal proofs that are now used.},
  keywords =     {Assertions;concufrent
                  programming;correctness;multiprocessing;synchronization;Safety;Flowcharts;Error
                  correction;Computer
                  errors;Humans;Mathematics;Testing;Assertions;concufrent
                  programming;correctness;multiprocessing;synchronization},
  doi =          {10.1109/TSE.1977.229904},
  ISSN =         {1939-3520},
  month =        {March},
}

@misc{quinnparallel,
  title =        {Parallel Programming in C with MPI and
                  OpenMP,(2003)},
  author =       {Quinn, Michael J},
  publisher =    {McGraw-Hill}
}

@misc{redaccion,
  title =        {Manual de redacción científica},
  author =       {Contreras, Ana M and Ochoa Jímenez, Rodolfo J},
  year =         2010,
  publisher =    {Ediciones de la Noche}
}
@Online{robinson19:ether_mainn_coord_block_ether_privat_sidec,
  author       = {Peter Robinson},
  title        = {{The merits of using Ethereum MainNet as a
                  Coordination Blockchain for Ethereum Private
                  Sidechains}},
  year         = 2019,
  archiveprefix= {arXiv},
  eprint       = {1906.04421v2},
  primaryclass = {cs.CR}
}
@Online{robinson19:applic_level_authen_ether_privat,
  author       = {Peter Robinson},
  title        = {{Application Level Authentication for Ethereum
                  Private Blockchain Atomic Crosschain Transactions}},
  year         = 2019,
  archiveprefix= {arXiv},
  eprint       = {1911.08083v1},
  primaryclass = {cs.CR}
}

@book{roth2017clean,
  title =        {Clean C++: Sustainable Software Development Patterns
                  and Best Practices with C++ 17},
  author =       {Roth, Stephan},
  year =         2017,
  publisher =    {Apress}
}

@inproceedings{scalingconcurrent2020,
  author =       {Ostrovsky, Or and Morrison, Adam},
  title =        {Scaling Concurrent Queues by Using HTM to Profit
                  from Failed Atomic Operations},
  year =         2020,
  isbn =         9781450368186,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/3332466.3374511},
  doi =          {10.1145/3332466.3374511},
  abstract =     {Queues are fundamental concurrent data structures,
                  but despite years of research, even the
                  state-of-the-art queues scale poorly. This poor
                  scalability occurs because of contended atomic
                  read-modify-write (RMW) operations.This paper makes
                  a first step towards designing a scalable
                  linearizable queue. We leverage hardware
                  transactional memory (HTM) to design TxCAS, a
                  scalable compare-and-set (CAS) primitive---despite
                  HTM being targeted mainly at uncontended
                  scenarios.Leveraging TxCAS's scalability requires a
                  queue design that does not blindly retry failed
                  CASs. We thus apply TxCAS to the baskets queue,
                  which steers enqueuers whose CAS fails into
                  dedicated basket data structures. Coupled with a
                  new, scalable basket algorithm, we obtain SBQ, the
                  scalable baskets queue. At high concurrency levels,
                  SBQ outperforms the fastest queue today by 1.6X on a
                  producer-only workload.},
  booktitle =    {Proceedings of the 25th ACM SIGPLAN Symposium on
                  Principles and Practice of Parallel Programming},
  pages =        {89–101},
  numpages =     13,
  location =     {San Diego, California},
  series =       {PPoPP '20}
}

@article{10.1145.324133.324234,
  author =       {Blumofe, Robert D. and Leiserson, Charles E.},
  title =        {Scheduling Multithreaded Computations by Work
                  Stealing},
  year =         1999,
  issue_date =   {September 1999},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       46,
  number =       5,
  issn =         {0004-5411},
  url =          {https://doi.org/10.1145/324133.324234},
  doi =          {10.1145/324133.324234},
  journal =      {J. ACM},
  month =        sep,
  pages =        {720–748},
  numpages =     29,
  keywords =     {randomized algorithm, critical-path length, thread
                  scheduling, work stealing, multiprocessor,
                  multithreading}
}

@inproceedings{DBLP_conf_wdag_000119,
  author =       {Nikolaev, Ruslan},
  editor =       {Jukka Suomela},
  title =        {A Scalable, Portable, and Memory-Efficient Lock-Free
                  {FIFO} Queue},
  booktitle =    {33rd International Symposium on Distributed
                  Computing, {DISC} 2019, October 14-18, 2019,
                  Budapest, Hungary},
  series =       {LIPIcs},
  volume =       146,
  pages =        {28:1--28:16},
  publisher =    {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r
                  Informatik},
  year =         2019,
  url =          {https://doi.org/10.4230/LIPIcs.DISC.2019.28},
  doi =          {10.4230/LIPIcs.DISC.2019.28},
  timestamp =    {Wed, 09 Oct 2019 12:08:01 +0200},
  biburl =       {https://dblp.org/rec/conf/wdag/000119.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{Back2014EnablingBI,
  title =        {Enabling Blockchain Innovations with Pegged},
  author =       {Sidechains Adam Back and Matt Corallo and Luke
                  Dashjr and Mark Friedenbach and Gregory Maxwell and
                  Andrew Miller and Andrew Poelstra and Jorge
                  Tim{\'o}n},
  year =         2014
}

@article{SIMPLE.Methodology.Programming.High.Performance,
  author =       {Bader, David and Jaja, Joseph},
  year =         1999,
  month =        07,
  pages =        {92-108},
  title =        {SIMPLE: A Methodology for Programming High
                  Performance Algorithms on Clusters of Symmetric
                  Multiprocessors (SMPs)},
  volume =       58,
  journal =      {Journal of Parallel and Distributed Computing},
  doi =          {10.1006/jpdc.1999.1541}
}

@book{skansi2018introduction,
  title =        {Introduction to Deep Learning: from logical calculus
                  to artificial intelligence},
  author =       {Skansi, Sandro},
  year =         2018,
  publisher =    {Springer}
}

@book{skiena2017data,
  title =        {The data science design manual},
  author =       {Skiena, Steven S},
  year =         2017,
  publisher =    {Springer}
}

@book{smart2016cryptography,
  title =        {Cryptography made simple},
  author =       {Smart, Nigel P},
  volume =       481,
  year =         2016,
  publisher =    {Springer}
}

@book{tanwar2019multimedia,
  title =        {Multimedia Big Data Computing for IoT Applications:
                  Concepts, Paradigms and Solutions},
  author =       {Tanwar, Sudeep and Tyagi, Sudhanshu and Kumar,
                  Neeraj},
  volume =       163,
  year =         2019,
  publisher =    {Springer}
}

@article{thread.scheduling.multiprogrammed,
  author =       {Arora, Nimar and Blumofe, Robert and Plaxton, C.},
  year =         2001,
  month =        03,
  pages =        {115-144},
  title =        {Thread Scheduling for Multiprogrammed
                  Multiprocessors},
  volume =       34,
  journal =      {Theory Comput. Syst.},
  doi =          {10.1007/s00224-001-0004-z}
}
@unknown{transactional_smart_contracts,
  author =       {Zakhary, Victor and Agrawal, Divyakant and Abbadi,
                  Amr},
  year =         {2019},
  month =        {09},
  pages =        {},
  title =        {Transactional Smart Contracts in Blockchain Systems}
}

@book{trobec2018introduction,
  title =        {Introduction to Parallel Computing: From Algorithms
                  to Programming on State-of-the-Art Platforms},
  author =       {Trobec, Roman and Slivnik, Boštjan and Bulić,
                  Patricio and Robič, Borut},
  year =         2018,
  publisher =    {Springer}
}

@inproceedings{DBLP_conf_popl_VafeiadisBCMN15,
  author =       {Viktor Vafeiadis and Thibaut Balabonski and Soham
                  Chakraborty and Robin Morisset and Francesco Zappa
                  Nardelli},
  editor =       {Sriram K. Rajamani and David Walker},
  title =        {Common Compiler Optimisations are Invalid in the
                  {C11} Memory Model and what we can do about it},
  booktitle =    {Proceedings of the 42nd Annual {ACM}
                  {SIGPLAN-SIGACT} Symposium on Principles of
                  Programming Languages, {POPL} 2015, Mumbai, India,
                  January 15-17, 2015},
  pages =        {209--220},
  publisher =    {{ACM}},
  year =         2015,
  url =          {https://doi.org/10.1145/2676726.2676995},
  doi =          {10.1145/2676726.2676995},
  timestamp =    {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl =       {https://dblp.org/rec/conf/popl/VafeiadisBCMN15.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{van2017using,
  title =        {Using OpenMP—The Next Step: Affinity, Accelerators,
                  Tasking, and SIMD},
  author =       {Van der Pas, Ruud and Stotzer, Eric and Terboven,
                  Christian},
  year =         2017,
  publisher =    {MIT Press}
}

@article{wfq-ppopp16,
  author =       {Yang, Chaoran and Mellor-Crummey, John},
  title =        {A Wait-Free Queue as Fast as Fetch-and-Add},
  year =         2016,
  issue_date =   {August 2016},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       51,
  number =       8,
  issn =         {0362-1340},
  url =          {https://doi.org/10.1145/3016078.2851168},
  doi =          {10.1145/3016078.2851168},
  abstract =     {Concurrent data structures that have fast and
                  predictable performance are of critical importance
                  for harnessing the power of multicore processors,
                  which are now ubiquitous. Although wait-free
                  objects, whose operations complete in a bounded
                  number of steps, were devised more than two decades
                  ago, wait-free objects that can deliver scalable
                  high performance are still rare.In this paper, we
                  present the first wait-free FIFO queue based on
                  fetch-and-add (FAA). While compare-and-swap (CAS)
                  based non-blocking algorithms may perform poorly due
                  to work wasted by CAS failures, algorithms that
                  coordinate using FAA, which is guaranteed to
                  succeed, can in principle perform better under high
                  contention. Along with FAA, our queue uses a custom
                  epoch-based scheme to reclaim memory; on x86
                  architectures, it requires no extra memory fences on
                  our algorithm's typical execution path. An empirical
                  study of our new FAA-based wait-free FIFO queue
                  under high contention on four different
                  architectures with many hardware threads shows that
                  it outperforms prior queue designs that lack a
                  wait-free progress guarantee. Surprisingly, at the
                  highest level of contention, the throughput of our
                  queue is often as high as that of a microbenchmark
                  that only performs FAA. As a result, our fast
                  wait-free queue implementation is useful in practice
                  on most multi-core systems today. We believe that
                  our design can serve as an example of how to
                  construct other fast wait-free objects.},
  journal =      {SIGPLAN Not.},
  month =        feb,
  articleno =    16,
  numpages =     13,
  keywords =     {non-blocking queue, fast-path-slow-path, wait-free}
}

@book{wang2018systems,
  title =        {Systems Programming in Unix/Linux},
  author =       {Wang, KC},
  year =         2018,
  publisher =    {Springer}
}

@article{wolfgang2011introduction,
  title =        {Introduction to artificial intelligence},
  author =       {Wolfgang, Ertel},
  journal =      {Translated by Nathanael Black With illustrations by
                  Florian Mast, Springer-Verlag London Limited},
  year =         2011
}

@inproceedings{DBLP_conf_ppopp_YangM16,
  author =       {Chaoran Yang and John M. Mellor{-}Crummey},
  editor =       {Rafael Asenjo and Tim Harris},
  title =        {A wait-free queue as fast as fetch-and-add},
  booktitle =    {Proceedings of the 21st {ACM} {SIGPLAN} Symposium on
                  Principles and Practice of Parallel Programming,
                  PPoPP 2016, Barcelona, Spain, March 12-16, 2016},
  pages =        {16:1--16:13},
  publisher =    {{ACM}},
  year =         2016,
  url =          {https://doi.org/10.1145/2851141.2851168},
  doi =          {10.1145/2851141.2851168},
  timestamp =    {Tue, 06 Nov 2018 16:57:28 +0100},
  biburl =       {https://dblp.org/rec/conf/ppopp/YangM16.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_podc_MichaelS96,
  author =       {Maged M. Michael and Michael L. Scott},
  editor =       {James E. Burns and Yoram Moses},
  title =        {Simple, Fast, and Practical Non-Blocking and
                  Blocking Concurrent Queue Algorithms},
  booktitle =    {Proceedings of the Fifteenth Annual {ACM} Symposium
                  on Principles of Distributed Computing,
                  Philadelphia, Pennsylvania, USA, May 23-26, 1996},
  pages =        {267--275},
  publisher =    {{ACM}},
  year =         1996,
  url =          {https://doi.org/10.1145/248052.248106},
  doi =          {10.1145/248052.248106},
  timestamp =    {Wed, 14 Nov 2018 10:51:56 +0100},
  biburl =       {https://dblp.org/rec/conf/podc/MichaelS96.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}
@Online{200505427,
  author       = {Armando Castañeda AND Sergio Rajsbaum AND Michel
                  Raynal},
  title        = {{Relaxed Queues and Stacks from Read/Write
                  Operations}},
  year         = 2020,
  archiveprefix= {arXiv},
  eprint       = {200505427v2},
  primaryclass = {cs.DC}
}

@article{DBLP_journals_jpdc_HendlerSY10,
  author =       {Danny Hendler and Nir Shavit and Lena Yerushalmi},
  title =        {A scalable lock-free stack algorithm},
  journal =      {J. Parallel Distributed Comput.},
  volume =       70,
  number =       1,
  pages =        {1--12},
  year =         2010,
  url =          {https://doi.org/10.1016/j.jpdc.2009.08.011},
  doi =          {10.1016/j.jpdc.2009.08.011},
  timestamp =    {Sat, 22 Feb 2020 19:35:49 +0100},
  biburl =       {https://dblp.org/rec/journals/jpdc/HendlerSY10.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP:conf/stoc/BeameF99,
  author =       {Paul Beame and Faith E. Fich},
  title =        {Optimal Bounds for the Predecessor Problem},
  year =         1999,
  booktitle =    {Proceedings of the Thirty-First Annual {ACM}
                  Symposium on Theory of Computing, May 1-4, 1999,
                  Atlanta, Georgia, {USA}},
  pages =        {295-304},
  doi =          {10.1145/301250.301323},
  url =          {https://doi.org/10.1145/301250.301323},
  crossref =     {DBLP:conf/stoc/1999},
  timestamp =    {Tue, 06 Nov 2018 11:07:05 +0100},
  biburl =       {https://dblp.org/rec/conf/stoc/BeameF99.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@proceedings{DBLP:conf/stoc/1999,
  editor =       {Jeffrey Scott Vitter and Lawrence L. Larmore and
                  Frank Thomson Leighton},
  title =        {Proceedings of the Thirty-First Annual {ACM}
                  Symposium on Theory of Computing, May 1-4, 1999,
                  Atlanta, Georgia, {USA}},
  publisher =    {{ACM}},
  year =         1999,
  isbn =         {1-58113-067-8},
  timestamp =    {Thu, 11 Mar 2021 00:39:39 +0100},
  biburl =       {https://dblp.org/rec/conf/stoc/1999.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_stoc_BeameF99,
  author =       {Paul Beame and Faith E. Fich},
  editor =       {Jeffrey Scott Vitter and Lawrence L. Larmore and
                  Frank Thomson Leighton},
  title =        {Optimal Bounds for the Predecessor Problem},
  booktitle =    {Proceedings of the Thirty-First Annual {ACM}
                  Symposium on Theory of Computing, May 1-4, 1999,
                  Atlanta, Georgia, {USA}},
  pages =        {295--304},
  publisher =    {{ACM}},
  year =         1999,
  url =          {https://doi.org/10.1145/301250.301323},
  doi =          {10.1145/301250.301323},
  timestamp =    {Tue, 06 Nov 2018 11:07:05 +0100},
  biburl =       {https://dblp.org/rec/conf/stoc/BeameF99.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_jpdc_AttiyaCH18,
  author =       {Hagit Attiya and Armando Castañeda and Danny
                  Hendler},
  title =        {Nontrivial and universal helping for wait-free
                  queues and stacks},
  year =         2018,
  volume =       121,
  pages =        {1-14},
  doi =          {10.1016/j.jpdc.2018.06.004},
  url =          {https://doi.org/10.1016/j.jpdc.2018.06.004},
  journal =      {J. Parallel Distributed Comput.},
  timestamp =    {Sat, 22 Feb 2020 19:35:43 +0100},
  biburl =       {https://dblp.org/rec/journals/jpdc/AttiyaCH18.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{Herlihy_1993,
  author =       {Herlihy, Maurice},
  title =        {A methodology for implementing highly concurrent
                  data objects},
  year =         1993,
  volume =       15,
  number =       5,
  month =        {Nov},
  pages =        {745–770},
  issn =         {1558-4593},
  doi =          {10.1145/161468.161469},
  url =          {http://dx.doi.org/10.1145/161468.161469},
  journal =      {ACM Transactions on Programming Languages and
                  Systems},
  publisher =    {Association for Computing Machinery (ACM)}
}

@InProceedings{DBLP_conf_podc_Michael02,
  author =       {Maged M. Michael},
  title =        {Safe memory reclamation for dynamic lock-free
                  objects using atomic reads and writes},
  year =         2002,
  booktitle =    {Proceedings of the Twenty-First Annual {ACM}
                  Symposium on Principles of Distributed Computing,
                  {PODC} 2002, Monterey, California, USA, July 21-24,
                  2002},
  pages =        {21-30},
  doi =          {10.1145/571825.571829},
  url =          {https://doi.org/10.1145/571825.571829},
  crossref =     {DBLP:conf/podc/2002},
  timestamp =    {Tue, 06 Nov 2018 11:07:19 +0100},
  biburl =       {https://dblp.org/rec/conf/podc/Michael02.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_wdag_HerlihyLM02,
  author =       {Maurice Herlihy and Victor Luchangco and Mark Moir},
  title =        {The Repeat Offender Problem: {A} Mechanism for
                  Supporting Dynamic-Sized, Lock-Free Data Structures},
  year =         2002,
  booktitle =    {Distributed Computing, 16th International
                  Conference, {DISC} 2002, Toulouse, France, October
                  28-30, 2002 Proceedings},
  pages =        {339-353},
  doi =          {10.1007/3-540-36108-1\_23},
  url =          {https://doi.org/10.1007/3-540-36108-1\_23},
  crossref =     {DBLP:conf/wdag/2002},
  timestamp =    {Tue, 14 May 2019 10:00:54 +0200},
  biburl =       {https://dblp.org/rec/conf/wdag/HerlihyLM02.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_opodis_HerlihyS11,
  author =       {Maurice Herlihy and Nir Shavit},
  title =        {On the Nature of Progress},
  year =         2011,
  booktitle =    {Principles of Distributed Systems - 15th
                  International Conference, {OPODIS} 2011, Toulouse,
                  France, December 13-16, 2011. Proceedings},
  pages =        {313-328},
  doi =          {10.1007/978-3-642-25873-2\_22},
  url =          {https://doi.org/10.1007/978-3-642-25873-2\_22},
  crossref =     {DBLP:conf/opodis/2011},
  timestamp =    {Tue, 14 May 2019 10:00:52 +0200},
  biburl =       {https://dblp.org/rec/conf/opodis/HerlihyS11.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_jpdc_ShavitZ00,
  author =       {Nir Shavit and Asaph Zemach},
  title =        {Combining Funnels: {A} Dynamic Approach to Software
                  Combining},
  year =         2000,
  volume =       60,
  number =       11,
  pages =        {1355-1387},
  doi =          {10.1006/jpdc.2000.1621},
  url =          {https://doi.org/10.1006/jpdc.2000.1621},
  journal =      {J. Parallel Distributed Comput.},
  timestamp =    {Sat, 22 Feb 2020 19:35:54 +0100},
  biburl =       {https://dblp.org/rec/journals/jpdc/ShavitZ00.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}
@Online{castañeda20_fully_read_write_fence_free,
  author       = {Armando Castañeda AND Miguel Piña},
  title        = {{Fully Read/Write Fence-Free Work-Stealing with
                  Multiplicity}},
  year         = 2020,
  archiveprefix= {arXiv},
  eprint       = {2008.04424v2},
  primaryclass = {cs.DC}
}

@InProceedings{DBLP_conf_netys_Delporte-Gallet18,
  author =       {Carole Delporte{-}Gallet and Hugues Fauconnier and
                  Sergio Rajsbaum and Nayuta Yanagisawa},
  title =        {An Anonymous Wait-Free Weak-Set Object
                  Implementation},
  year =         2018,
  booktitle =    {Networked Systems - 6th International Conference,
                  {NETYS} 2018, Essaouira, Morocco, May 9-11, 2018,
                  Revised Selected Papers},
  pages =        {141-156},
  doi =          {10.1007/978-3-030-05529-5\_10},
  url =          {https://doi.org/10.1007/978-3-030-05529-5\_10},
  crossref =     {DBLP:conf/netys/2018},
  timestamp =    {Tue, 14 May 2019 10:00:36 +0200},
  biburl =
                  {https://dblp.org/rec/conf/netys/Delporte-Gallet18.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_ijpp_YangH18,
  author =       {Jixiang Yang and Qingbi He},
  title =        {Scheduling Parallel Computations by Work Stealing:
                  {A} Survey},
  year =         2018,
  volume =       46,
  number =       2,
  pages =        {173-197},
  doi =          {10.1007/s10766-016-0484-8},
  url =          {https://doi.org/10.1007/s10766-016-0484-8},
  journal =      {Int. J. Parallel Program.},
  timestamp =    {Wed, 01 Apr 2020 08:50:06 +0200},
  biburl =       {https://dblp.org/rec/journals/ijpp/YangH18.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_isca_AgarwalC89,
  author =       {Anant Agarwal and Mathews Cherian},
  title =        {Adaptive Backoff Synchronization Techniques},
  year =         1989,
  booktitle =    {Proceedings of the 16th Annual International
                  Symposium on Computer Architecture. Jerusalem,
                  Israel, June 1989},
  pages =        {396-406},
  doi =          {10.1145/74925.74970},
  url =          {https://doi.org/10.1145/74925.74970},
  crossref =     {DBLP:conf/isca/1989},
  timestamp =    {Wed, 16 Oct 2019 14:14:49 +0200},
  biburl =       {https://dblp.org/rec/conf/isca/AgarwalC89.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_toplas_HerlihyW90DBLP_journals_toplas_HerlihyW90,
  author =       {Maurice Herlihy and Jeannette M. Wing},
  title =        {Linearizability: {A} Correctness Condition for
                  Concurrent Objects},
  year =         1990,
  volume =       12,
  number =       3,
  pages =        {463-492},
  doi =          {10.1145/78969.78972},
  url =          {https://doi.org/10.1145/78969.78972},
  journal =      {{ACM} Trans. Program. Lang. Syst.},
  timestamp =    {Wed, 14 Nov 2018 10:30:40 +0100},
  biburl =       {https://dblp.org/rec/journals/toplas/HerlihyW90.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_ftrtft_HerlihyW88,
  author =       {Maurice Herlihy and Jeannette M. Wing},
  title =        {Reasoning about Atomic Objects},
  year =         1988,
  booktitle =    {Formal Techniques in Real-Time and Fault-Tolerant
                  Systems, Proceedings of a Symposium, Warwick, UK,
                  September 22-23, 1988},
  pages =        {193-208},
  doi =          {10.1007/3-540-50302-1\_14},
  url =          {https://doi.org/10.1007/3-540-50302-1\_14},
  crossref =     {DBLP:conf/ftrtft/1988},
  timestamp =    {Tue, 14 May 2019 10:00:40 +0200},
  biburl =       {https://dblp.org/rec/conf/ftrtft/HerlihyW88.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_popl_HerlihyW87,
  author =       {Maurice Herlihy and Jeannette M. Wing},
  title =        {Axioms for Concurrent Objects},
  year =         1987,
  booktitle =    {Conference Record of the Fourteenth Annual {ACM}
                  Symposium on Principles of Programming Languages,
                  Munich, Germany, January 21-23, 1987},
  pages =        {13-26},
  doi =          {10.1145/41625.41627},
  url =          {https://doi.org/10.1145/41625.41627},
  crossref =     {DBLP:conf/popl/1987},
  timestamp =    {Wed, 14 Nov 2018 10:52:34 +0100},
  biburl =       {https://dblp.org/rec/conf/popl/HerlihyW87.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_tocs_AttiyaW94,
  author =       {Hagit Attiya and Jennifer L. Welch},
  title =        {Sequential Consistency versus Linearizability},
  year =         1994,
  volume =       12,
  number =       2,
  pages =        {91-122},
  doi =          {10.1145/176575.176576},
  url =          {https://doi.org/10.1145/176575.176576},
  journal =      {{ACM} Trans. Comput. Syst.},
  timestamp =    {Mon, 16 Sep 2019 14:52:38 +0200},
  biburl =       {https://dblp.org/rec/journals/tocs/AttiyaW94.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_jpdc_BlumofeJKLRZ96,
  author =       {Robert D. Blumofe and Christopher F. Joerg and
                  Bradley C. Kuszmaul and Charles E. Leiserson and
                  Keith H. Randall and Yuli Zhou},
  title =        {Cilk: An Efficient Multithreaded Runtime System},
  year =         1996,
  volume =       37,
  number =       1,
  pages =        {55-69},
  doi =          {10.1006/jpdc.1996.0107},
  url =          {https://doi.org/10.1006/jpdc.1996.0107},
  journal =      {J. Parallel Distributed Comput.},
  timestamp =    {Sat, 22 Feb 2020 19:35:57 +0100},
  biburl =
                  {https://dblp.org/rec/journals/jpdc/BlumofeJKLRZ96.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_jacm_AspnesAC12,
  author =       {James Aspnes and Hagit Attiya and Keren
                  Censor{-}Hillel},
  title =        {Polylogarithmic concurrent data structures from
                  monotone circuits},
  year =         2012,
  volume =       59,
  number =       1,
  pages =        {2:1--2:24},
  doi =          {10.1145/2108242.2108244},
  url =          {https://doi.org/10.1145/2108242.2108244},
  journal =      {J. {ACM}},
  timestamp =    {Mon, 16 Sep 2019 14:49:46 +0200},
  biburl =       {https://dblp.org/rec/journals/jacm/AspnesAC12.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@incollection{DBLP_reference_crc_MoirS04,
  author =       {Mark Moir and Nir Shavit},
  editor =       {Dinesh P. Mehta and Sartaj Sahni},
  title =        {Concurrent Data Structures},
  booktitle =    {Handbook of Data Structures and Applications},
  publisher =    {Chapman and Hall/CRC},
  year =         2004,
  url =          {https://doi.org/10.1201/9781420035179.ch47},
  doi =          {10.1201/9781420035179.ch47},
  timestamp =    {Mon, 26 Oct 2020 09:04:38 +0100},
  biburl =       {https://dblp.org/rec/reference/crc/MoirS04.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_jacm_AttiyaGHK09,
  author =       {Hagit Attiya and Rachid Guerraoui and Danny Hendler
                  and Petr Kuznetsov},
  title =        {The complexity of obstruction-free implementations},
  journal =      {J. {ACM}},
  volume =       56,
  number =       4,
  pages =        {24:1--24:33},
  year =         2009,
  url =          {https://doi.org/10.1145/1538902.1538908},
  doi =          {10.1145/1538902.1538908},
  timestamp =    {Mon, 16 Sep 2019 14:49:46 +0200},
  biburl =       {https://dblp.org/rec/journals/jacm/AttiyaGHK09.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_popl_AttiyaGHKMV11,
  author =       {Hagit Attiya and Rachid Guerraoui and Danny Hendler
                  and Petr Kuznetsov and Maged M. Michael and Martin
                  T. Vechev},
  editor =       {Thomas Ball and Mooly Sagiv},
  title =        {Laws of order: expensive synchronization in
                  concurrent algorithms cannot be eliminated},
  booktitle =    {Proceedings of the 38th {ACM} {SIGPLAN-SIGACT}
                  Symposium on Principles of Programming Languages,
                  {POPL} 2011, Austin, TX, USA, January 26-28, 2011},
  pages =        {487--498},
  publisher =    {{ACM}},
  year =         2011,
  url =          {https://doi.org/10.1145/1926385.1926442},
  doi =          {10.1145/1926385.1926442},
  timestamp =    {Thu, 24 Jun 2021 16:19:31 +0200},
  biburl =       {https://dblp.org/rec/conf/popl/AttiyaGHKMV11.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_siamcomp_EllenHS12,
  author =       {Faith Ellen and Danny Hendler and Nir Shavit},
  title =        {On the Inherent Sequentiality of Concurrent Objects},
  journal =      {{SIAM} J. Comput.},
  volume =       41,
  number =       3,
  pages =        {519--536},
  year =         2012,
  url =          {https://doi.org/10.1137/08072646X},
  doi =          {10.1137/08072646X},
  timestamp =    {Sat, 27 May 2017 14:22:58 +0200},
  biburl =
                  {https://dblp.org/rec/journals/siamcomp/EllenHS12.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_cacm_Shavit11,
  author =       {Nir Shavit},
  title =        {Data structures in the multicore age},
  journal =      {Commun. {ACM}},
  volume =       54,
  number =       3,
  pages =        {76--84},
  year =         2011,
  url =          {https://doi.org/10.1145/1897852.1897873},
  doi =          {10.1145/1897852.1897873},
  timestamp =    {Tue, 06 Nov 2018 12:51:35 +0100},
  biburl =       {https://dblp.org/rec/journals/cacm/Shavit11.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_opodis_CastanedaRR20,
  author =       {Armando Castañeda and Sergio Rajsbaum and Michel
                  Raynal},
  editor =       {Quentin Bramas and Rotem Oshman and Paolo Romano},
  title =        {Relaxed Queues and Stacks from Read/Write
                  Operations},
  booktitle =    {24th International Conference on Principles of
                  Distributed Systems, {OPODIS} 2020, December 14-16,
                  2020, Strasbourg, France (Virtual Conference)},
  series =       {LIPIcs},
  volume =       184,
  pages =        {13:1--13:19},
  publisher =    {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r
                  Informatik},
  year =         2020,
  url =          {https://doi.org/10.4230/LIPIcs.OPODIS.2020.13},
  doi =          {10.4230/LIPIcs.OPODIS.2020.13},
  timestamp =    {Mon, 25 Jan 2021 16:26:02 +0100},
  biburl =       {https://dblp.org/rec/conf/opodis/CastanedaRR20.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_wdag_CastanedaP21,
  author =       {Armando Castañeda and Miguel Piña},
  editor =       {Seth Gilbert},
  title =        {Fully Read/Write Fence-Free Work-Stealing with
                  Multiplicity},
  booktitle =    {35th International Symposium on Distributed
                  Computing, {DISC} 2021, October 4-8, 2021, Freiburg,
                  Germany (Virtual Conference)},
  series =       {LIPIcs},
  volume =       209,
  pages =        {16:1--16:20},
  publisher =    {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r
                  Informatik},
  year =         2021,
  url =          {https://doi.org/10.4230/LIPIcs.DISC.2021.16},
  doi =          {10.4230/LIPIcs.DISC.2021.16},
  timestamp =    {Mon, 25 Oct 2021 15:03:56 +0200},
  biburl =       {https://dblp.org/rec/conf/wdag/CastanedaP21.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_ubiquity_Herlihy14,
  author =       {Maurice Herlihy},
  title =        {The Future of Synchronization on Multicores: The
                  multicore transformation (Ubiquity symposium)},
  journal =      {Ubiquity},
  volume =       2014,
  number =       {September},
  pages =        {1:1--1:9},
  year =         2014,
  url =          {https://doi.org/10.1145/2618405},
  doi =          {10.1145/2618405},
  timestamp =    {Tue, 06 Nov 2018 12:51:18 +0100},
  biburl =
                  {https://dblp.org/rec/journals/ubiquity/Herlihy14.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_cacm_SewellSONM10,
  author =       {Peter Sewell and Susmit Sarkar and Scott Owens and
                  Francesco Zappa Nardelli and Magnus O. Myreen},
  title =        {x86-TSO: a rigorous and usable programmer's model
                  for x86 multiprocessors},
  year =         2010,
  volume =       53,
  number =       7,
  pages =        {89-97},
  doi =          {10.1145/1785414.1785443},
  url =          {https://doi.org/10.1145/1785414.1785443},
  journal =      {Commun. {ACM}},
  timestamp =    {Tue, 06 Nov 2018 12:51:37 +0100},
  biburl =       {https://dblp.org/rec/journals/cacm/SewellSONM10.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Book{DBLP_books_daglib_0020056,
  author =       {Maurice Herlihy and Nir Shavit},
  title =        {The art of multiprocessor programming},
  year =         2008,
  publisher =    {Morgan Kaufmann},
  isbn =         {978-0-12-370591-4},
  timestamp =    {Thu, 10 Feb 2011 14:09:19 +0100},
  biburl =       {https://dblp.org/rec/books/daglib/0020056.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}
@Comment Añadir libros pdf

@Book{DBLP_books_daglib_0017536,
  author =       {Hagit Attiya and Jennifer L. Welch},
  title =        {Distributed computing - fundamentals, simulations,
                  and advanced topics {(2.} ed.)},
  year =         2004,
  series =       {Wiley series on parallel and distributed computing},
  publisher =    {Wiley},
  isbn =         {978-0-471-45324-6},
  timestamp =    {Mon, 15 Jul 2019 16:26:46 +0200},
  biburl =       {https://dblp.org/rec/books/daglib/0017536.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_ipl_Fernandez-Campusano17,
  author =       {Christian Fern{\'{a}}ndez{-}Campusano and Mikel
                  Larrea and Roberto Corti{\~{n}}as and Michel Raynal},
  title =        {A distributed leader election algorithm in
                  crash-recovery and omissive systems},
  year =         2017,
  volume =       118,
  pages =        {100-104},
  doi =          {10.1016/j.ipl.2016.10.007},
  url =          {https://doi.org/10.1016/j.ipl.2016.10.007},
  journal =      {Inf. Process. Lett.},
  timestamp =    {Thu, 14 Oct 2021 09:41:02 +0200},
  biburl =
                  {https://dblp.org/rec/journals/ipl/Fernandez-Campusano17.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{DBLP_series_synthesis_2020Nagarajan,
  author =       {Vijay Nagarajan and Daniel J. Sorin and Mark D. Hill
                  and David A. Wood},
  title =        {A Primer on Memory Consistency and Cache Coherence,
                  Second Edition},
  series =       {Synthesis Lectures on Computer Architecture},
  publisher =    {Morgan {\&} Claypool Publishers},
  year =         2020,
  url =          {https://doi.org/10.2200/S00962ED2V01Y201910CAC049},
  doi =          {10.2200/S00962ED2V01Y201910CAC049},
  timestamp =    {Wed, 07 Apr 2021 17:06:18 +0200},
  biburl =
                  {https://dblp.org/rec/series/synthesis/2020Nagarajan.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_oopsla_GeorgesBE07,
  author =       {Andy Georges and Dries Buytaert and Lieven Eeckhout},
  editor =       {Richard P. Gabriel and David F. Bacon and Cristina
                  Videira Lopes and Guy L. Steele Jr.},
  title =        {Statistically rigorous java performance evaluation},
  booktitle =    {Proceedings of the 22nd Annual {ACM} {SIGPLAN}
                  Conference on Object-Oriented Programming, Systems,
                  Languages, and Applications, {OOPSLA} 2007, October
                  21-25, 2007, Montreal, Quebec, Canada},
  pages =        {57--76},
  publisher =    {{ACM}},
  year =         2007,
  url =          {https://doi.org/10.1145/1297027.1297033},
  doi =          {10.1145/1297027.1297033},
  timestamp =    {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl =       {https://dblp.org/rec/conf/oopsla/GeorgesBE07.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{williams2019c++,
  title =        {C++ concurrency in action},
  author =       {Williams, Anthony},
  year =         2019,
  publisher =    {Simon and Schuster}
}

@Article{DBLP_journals_tpds_Michael04,
  author =       {Maged M. Michael},
  title =        {Hazard Pointers: Safe Memory Reclamation for
                  Lock-Free Objects},
  year =         2004,
  volume =       15,
  number =       6,
  pages =        {491-504},
  doi =          {10.1109/TPDS.2004.8},
  url =          {https://doi.org/10.1109/TPDS.2004.x8},
  journal =      {{IEEE} Trans. Parallel Distributed Syst.},
  timestamp =    {Fri, 02 Oct 2020 14:40:06 +0200},
  biburl =       {https://dblp.org/rec/journals/tpds/Michael04.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{mosberger1993memory,
  title =        {Memory consistency models},
  author =       {Mosberger, David},
  journal =      {ACM SIGOPS Operating Systems Review},
  volume =       27,
  number =       1,
  pages =        {18--26},
  year =         1993,
  publisher =    {ACM New York, NY, USA}
}

@article{mckenney2010memory,
  title =        {Memory barriers: a hardware view for software
                  hackers},
  author =       {McKenney, Paul E},
  journal =      {Linux Technology Center, IBM Beaverton},
  year =         2010
}

@misc{varHandleJdk92017,
  title =        {VarHandle: Java API},
  author =       {Oracle},
  url =
                  {https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html},
  journal =      {Java SE 9 &amp; JDK 9 },
  publisher =    {Oracle},
  year =         2017
}

@misc{memoryOrderCpp2020,
  title =        {std::memory\_order},
  url =
                  {https://en.cppreference.com/w/cpp/atomic/memory_order},
  author =       {ISO International Standard, ISO/IEC},
  journal =      {cppreference.com},
  publisher =    {ISO International Standard, ISO/IEC},
  year =         2020
}

@misc{threadFenceCpp2020,
  title =        {std::atomic\_thread\_fence},
  url =
                  {https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence},
  author =       {ISO International Standard, ISO/IEC},
  journal =      {cppreference.com},
  publisher =    {ISO International Standard, ISO/IEC},
  year =         2020
}

@book{book_1375147,
  title =        {Power and Performance: Software Analysis and
                  Optimization},
  author =       {Jim Kukunas},
  publisher =    {Morgan Kaufmann},
  isbn =         {0128007265,9780128007266},
  year =         2015,
  edition =      1,
}

@inproceedings{10.1145_1065010.1065042,
  author =       {Boehm, Hans-J.},
  title =        {Threads Cannot Be Implemented as a Library},
  year =         2005,
  isbn =         1595930566,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/1065010.1065042},
  doi =          {10.1145/1065010.1065042},
  abstract =     {In many environments, multi-threaded code is written
                  in a language that was originally designed without
                  thread support (e.g. C), to which a library of
                  threading primitives was subsequently added. There
                  appears to be a general understanding that this is
                  not the right approach. We provide specific
                  arguments that a pure library approach, in which the
                  compiler is designed independently of threading
                  issues, cannot guarantee correctness of the
                  resulting code.We first review why the approach
                  almost works, and then examine some of the
                  surprising behavior it may entail. We further
                  illustrate that there are very simple cases in which
                  a pure library-based approach seems incapable of
                  expressing an efficient parallel algorithm.Our
                  discussion takes place in the context of C with
                  Pthreads, since it is commonly used, reasonably well
                  specified, and does not attempt to ensure
                  type-safety, which would entail even stronger
                  constraints. The issues we raise are not specific to
                  that context.},
  booktitle =    {Proceedings of the 2005 ACM SIGPLAN Conference on
                  Programming Language Design and Implementation},
  pages =        {261–268},
  numpages =     8,
  keywords =     {pthreads, optimization, data race, threads, register
                  promotion},
  location =     {Chicago, IL, USA},
  series =       {PLDI '05}
}

@article{10.1145/1064978.1065042,
  author =       {Boehm, Hans-J.},
  title =        {Threads Cannot Be Implemented as a Library},
  year =         2005,
  issue_date =   {June 2005},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       40,
  number =       6,
  issn =         {0362-1340},
  url =          {https://doi.org/10.1145/1064978.1065042},
  doi =          {10.1145/1064978.1065042},
  abstract =     {In many environments, multi-threaded code is written
                  in a language that was originally designed without
                  thread support (e.g. C), to which a library of
                  threading primitives was subsequently added. There
                  appears to be a general understanding that this is
                  not the right approach. We provide specific
                  arguments that a pure library approach, in which the
                  compiler is designed independently of threading
                  issues, cannot guarantee correctness of the
                  resulting code.We first review why the approach
                  almost works, and then examine some of the
                  surprising behavior it may entail. We further
                  illustrate that there are very simple cases in which
                  a pure library-based approach seems incapable of
                  expressing an efficient parallel algorithm.Our
                  discussion takes place in the context of C with
                  Pthreads, since it is commonly used, reasonably well
                  specified, and does not attempt to ensure
                  type-safety, which would entail even stronger
                  constraints. The issues we raise are not specific to
                  that context.},
  journal =      {SIGPLAN Not.},
  month =        {jun},
  pages =        {261–268},
  numpages =     8,
  keywords =     {pthreads, optimization, threads, register promotion,
                  data race}
}

@article{ATTIYA2022181,
  title =        {Separating lock-freedom from wait-freedom at every
                  level of the consensus hierarchy},
  journal =      {Journal of Parallel and Distributed Computing},
  volume =       163,
  pages =        {181-197},
  year =         2022,
  issn =         {0743-7315},
  doi =          {https://doi.org/10.1016/j.jpdc.2022.01.025},
  url =
                  {https://www.sciencedirect.com/science/article/pii/S0743731522000302},
  author =       {Hagit Attiya and Armando Castañeda and Danny Hendler
                  and Matthieu Perrin},
  keywords =     {Progress conditions, Wait-freedom, Lock-freedom,
                  Consensus hierarchy, Linearizability},
  abstract =     {A long-standing open question has been whether
                  lock-freedom and wait-freedom are fundamentally
                  different progress conditions, namely, can the
                  former be provided in situations where the latter
                  cannot? This paper answers the question in the
                  affirmative, by proving that there are objects with
                  lock-free implementations, but without wait-free
                  implementations—using the same set of objects of any
                  finite coordination power. We precisely define an
                  object called n-process long-lived approximate
                  agreement (n-LLAA), in which two sets of processes
                  associated with two sides, 0 or 1, need to decide on
                  a sequence of increasingly closer outputs. We prove
                  that 2-LLAA has a lock-free linearizable
                  implementation using read/write objects only, and
                  that n-LLAA has a lock-free linearizable
                  implementation using read/write objects and
                  (n−1)-process consensus objects. In contrast, we
                  prove that there is no wait-free linearizable
                  implementation of n-LLAA using read/write objects
                  and specific (n−1)-process consensus objects, called
                  (n−1)-window registers.}
}

@inproceedings{DBLP_conf_wdag_HerlihyLM02,
  author =       {Maurice Herlihy and Victor Luchangco and Mark Moir},
  editor =       {Dahlia Malkhi},
  title =        {The Repeat Offender Problem: {A} Mechanism for
                  Supporting Dynamic-Sized, Lock-Free Data Structures},
  booktitle =    {Distributed Computing, 16th International
                  Conference, {DISC} 2002, Toulouse, France, October
                  28-30, 2002 Proceedings},
  series =       {Lecture Notes in Computer Science},
  volume =       2508,
  pages =        {339--353},
  publisher =    {Springer},
  year =         2002,
  url =          {https://doi.org/10.1007/3-540-36108-1\_23},
  doi =          {10.1007/3-540-36108-1\_23},
  timestamp =    {Tue, 14 May 2019 10:00:54 +0200},
  biburl =       {https://dblp.org/rec/conf/wdag/HerlihyLM02.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{DBLP_series_synthesis_2014Attiya,
  author =       {Hagit Attiya and Faith Ellen},
  title =        {Impossibility Results for Distributed Computing},
  series =       {Synthesis Lectures on Distributed Computing Theory},
  publisher =    {Morgan {\&} Claypool Publishers},
  year =         2014,
  url =          {https://doi.org/10.2200/S00551ED1V01Y201311DCT012},
  doi =          {10.2200/S00551ED1V01Y201311DCT012},
  timestamp =    {Tue, 16 May 2017 14:24:20 +0200},
  biburl =
                  {https://dblp.org/rec/series/synthesis/2014Attiya.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{LEE2002237,
  title =        {A study of dynamic memory management in C++
                  programs},
  journal =      {Computer Languages, Systems & Structures},
  volume =       28,
  number =       3,
  pages =        {237-272},
  year =         2002,
  issn =         {1477-8424},
  doi =          {https://doi.org/10.1016/S0096-0551(02)00015-2},
  url =
                  {https://www.sciencedirect.com/science/article/pii/S0096055102000152},
  author =       {Woo Hyong Lee and Morris Chang},
  keywords =     {Dynamic memory management, Life-span, Garbage
                  collection},
  abstract =     {Recently, the importance of dynamic memory
                  management has been increased significantly as there
                  is a growing number of development in
                  object-oriented programs. Many studies show that
                  dynamic memory management is one of the most
                  expensive components in many software systems. It
                  can consume up to 30\% of the program execution
                  time. Especially, in C++ programs, it tends to have
                  object creation and deletion prolifically. These
                  objects tend to have short life-spans. This paper
                  describes an integrated study of the C++'s memory
                  allocation behavior, a memory tracing tool and
                  memory managements based on the empirical study of
                  C++ programs. First, this paper summarizes the
                  hypothesis of situations that invoke the dynamic
                  memory management explicitly and implicitly. They
                  are: constructors, copy constructors, overloading
                  assignment operator=, type conversions and
                  application specific member functions. Second, a
                  dynamic memory tracing tool, called mtrace++, is
                  introduced to study the dynamic memory allocation
                  behavior in C++ programs. Third, a dynamic memory
                  allocation strategy, called O-Reuse, to reuse the
                  allocated objects to speed up the object
                  management. At the later part of this paper, an
                  automatic dynamic memory management, called GC++, is
                  discussed. GC++ collects unreferenced objects
                  automatically with high speed of
                  allocation/deallocation processes. The performance
                  gains of O-Reuse and GC++ are come from the
                  utilization of memory allocation/deallocation
                  behavior.}
}

@inproceedings{10_1145_3453483_3454090,
  author =       {Nikolaev, Ruslan and Ravindran, Binoy},
  title =        {Snapshot-Free, Transparent, and Robust Memory
                  Reclamation for Lock-Free Data Structures},
  year =         2021,
  isbn =         9781450383912,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/3453483.3454090},
  doi =          {10.1145/3453483.3454090},
  abstract =     {We present a family of safe memory reclamation
                  schemes, Hyaline, which are fast, scalable, and
                  transparent to the underlying lock-free data
                  structures. Hyaline is based on reference counting
                  -- considered impractical for memory reclamation in
                  the past due to high overheads. Hyaline uses
                  reference counters only during reclamation, but not
                  while accessing individual objects, which reduces
                  overheads for object accesses. Since with reference
                  counters, an arbitrary thread ends up freeing
                  memory, Hyaline's reclamation workload is (almost)
                  balanced across all threads, unlike most prior
                  reclamation schemes such as epoch-based reclamation
                  (EBR) or hazard pointers (HP). Hyaline often yields
                  (excellent) EBR-grade performance with (good)
                  HP-grade memory efficiency, which is a challenging
                  trade-off with all existing schemes. Hyaline schemes
                  offer: (i) high performance; (ii) good memory
                  efficiency; (iii) robustness: bounding memory usage
                  even in the presence of stalled threads, a
                  well-known problem with EBR; (iv) transparency:
                  supporting virtually unbounded number of threads (or
                  concurrent entities) that can be created and deleted
                  dynamically, and effortlessly join existent
                  workload; (v) autonomy: avoiding special OS
                  mechanisms and being non-intrusive to runtime or
                  compiler environments; (vi) simplicity: enabling
                  easy integration into unmanaged C/C++ code; and
                  (vii) generality: supporting many data
                  structures. All existing schemes lack one or more
                  properties. We have implemented and tested Hyaline
                  on x86(-64), ARM32/64, PowerPC, and MIPS. The
                  general approach requires LL/SC or double-width CAS,
                  while a specialized version also works with
                  single-width CAS. Our evaluation reveals that
                  Hyaline's throughput is very high -- it steadily
                  outperforms EBR by 10\% in one test and yields 2x
                  gains in oversubscribed scenarios. Hyaline's
                  superior memory efficiency is especially evident in
                  read-dominated workloads.},
  booktitle =    {Proceedings of the 42nd ACM SIGPLAN International
                  Conference on Programming Language Design and
                  Implementation},
  pages =        {987–1002},
  numpages =     16,
  keywords =     {hazard pointers, memory reclamation, lock-free,
                  epoch-based reclamation, non-blocking},
  location =     {Virtual, Canada},
  series =       {PLDI 2021}
}

@article{10_1145_3201897,
  author =       {Alistarh, Dan and Leiserson, William and Matveev,
                  Alexander and Shavit, Nir},
  title =        {ThreadScan: Automatic and Scalable Memory
                  Reclamation},
  year =         2018,
  issue_date =   {December 2017},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       4,
  number =       4,
  issn =         {2329-4949},
  url =          {https://doi.org/10.1145/3201897},
  doi =          {10.1145/3201897},
  abstract =     {The concurrent memory reclamation problem is that of
                  devising a way for a deallocating thread to verify
                  that no other concurrent threads hold references to
                  a memory block being deallocated. To date, in the
                  absence of automatic garbage collection, there is no
                  satisfactory solution to this problem; existing
                  tracking methods like hazard pointers, reference
                  counters, or epoch-based techniques like RCU are
                  either prohibitively expensive or require
                  significant programming expertise to the extent that
                  implementing them efficiently can be worthy of a
                  publication. None of the existing techniques are
                  automatic or even semi-automated.In this article, we
                  take a new approach to concurrent memory
                  reclamation. Instead of manually tracking access to
                  memory locations as done in techniques like hazard
                  pointers, or restricting shared accesses to specific
                  epoch boundaries as in RCU, our algorithm, called
                  ThreadScan, leverages operating system signaling to
                  automatically detect which memory locations are
                  being accessed by concurrent threads.Initial
                  empirical evidence shows that ThreadScan scales
                  surprisingly well and requires negligible
                  programming effort beyond the standard use of Malloc
                  and Free.},
  journal =      {ACM Trans. Parallel Comput.},
  month =        {may},
  articleno =    18,
  numpages =     18,
  keywords =     {lock-free data structures, memory reclamation,
                  Concurrent data structures, lock-based data
                  structures}
}

@inproceedings{10_1145_2755573_2755579,
  author =       {Cohen, Nachshon and Petrank, Erez},
  title =        {Efficient Memory Management for Lock-Free Data
                  Structures with Optimistic Access},
  year =         2015,
  isbn =         9781450335881,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2755573.2755579},
  doi =          {10.1145/2755573.2755579},
  abstract =     {Lock-free data structures achieve high
                  responsiveness, aid scalability, and avoid deadlocks
                  and livelocks. But providing memory management
                  support for such data structures without foiling
                  their progress guarantees is difficult. Often,
                  designers employ the hazard pointers technique,
                  which may impose a high performance overhead.In this
                  work we propose a novel memory management scheme for
                  lock-free data structures called optimistic
                  access. This scheme provides efficient support for
                  lock-free data structures that can be presented in a
                  normalized form. Our novel memory manager breaks the
                  traditional memory management invariant which never
                  lets a program touch reclaimed memory. In other
                  words, it allows the memory manager to reclaim
                  objects that may still be accessed later by
                  concurrently running threads. This broken invariant
                  provides an opportunity to obtain high parallelism
                  with excellent performance, but it also requires a
                  careful design. The optimistic access memory
                  management scheme is easy to employ and we
                  implemented it for a linked list, a hash table, and
                  a skip list. Measurements show that it dramatically
                  outperforms known memory reclamation methods.},
  booktitle =    {Proceedings of the 27th ACM Symposium on Parallelism
                  in Algorithms and Architectures},
  pages =        {254–263},
  numpages =     10,
  keywords =     {memory management, lock-free, non-blocking, hazard
                  pointers, concurrent data structures},
  location =     {Portland, Oregon, USA},
  series =       {SPAA '15}
}

@inproceedings{10_1145_2814270_2814298,
  author =       {Cohen, Nachshon and Petrank, Erez},
  title =        {Automatic Memory Reclamation for Lock-Free Data
                  Structures},
  year =         2015,
  isbn =         9781450336895,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2814270.2814298},
  doi =          {10.1145/2814270.2814298},
  abstract =     {Lock-free data-structures are widely employed in
                  practice, yet designing lock-free memory reclamation
                  for them is notoriously difficult. In particular,
                  all known lock-free reclamation schemes are
                  ``manual'' in the sense that the developer has to
                  specify when nodes have retired and may be
                  reclaimed. Retiring nodes adequately is non-trivial
                  and often requires the modification of the original
                  lock-free algorithm. In this paper we present an
                  automatic lock-free reclamation scheme for lock-free
                  data-structures in the spirit of a mark-sweep
                  garbage collection. The proposed algorithm works
                  with any normalized lock-free algorithm and with no
                  need for the programmer to retire nodes or make
                  changes to the algorithm. Evaluation of the proposed
                  scheme on a linked-list and a hash table shows that
                  it performs similarly to the best manual (lock-free)
                  memory reclamation scheme.},
  booktitle =    {Proceedings of the 2015 ACM SIGPLAN International
                  Conference on Object-Oriented Programming, Systems,
                  Languages, and Applications},
  pages =        {260–279},
  numpages =     20,
  keywords =     {Memory Management, Lock-free, Non-blocking, Hazard
                  Pointers, Concurrent Data Structures},
  location =     {Pittsburgh, PA, USA},
  series =       {OOPSLA 2015}
}

@inproceedings{10_1145_2935764_2935790,
  author =       {Balmau, Oana and Guerraoui, Rachid and Herlihy,
                  Maurice and Zablotchi, Igor},
  title =        {Fast and Robust Memory Reclamation for Concurrent
                  Data Structures},
  year =         2016,
  isbn =         9781450342100,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2935764.2935790},
  doi =          {10.1145/2935764.2935790},
  abstract =     {In concurrent systems without automatic garbage
                  collection, it is challenging to determine when it
                  is safe to reclaim memory, especially for lock-free
                  data structures. Existing concurrent memory
                  reclamation schemes are either fast but do not
                  tolerate process delays, robust to delays but with
                  high overhead, or both robust and fast but narrowly
                  applicable. This paper proposes QSense, a novel
                  concurrent memory reclamation technique. QSense is a
                  hybrid technique with a fast path and a fallback
                  path. In the common case (without process delays), a
                  high-performing memory reclamation scheme is used
                  (fast path). If process delays block memory
                  reclamation through the fast path, a robust fallback
                  path is used to guarantee progress. The fallback
                  path uses hazard pointers, but avoids their
                  notorious need for frequent and expensive memory
                  fences.QSense is widely applicable, as we illustrate
                  through several lock-free data structure
                  algorithms. Our experimental evaluation shows that
                  QSense has an overhead comparable to the fastest
                  memory reclamation techniques, while still
                  tolerating prolonged process delays.},
  booktitle =    {Proceedings of the 28th ACM Symposium on Parallelism
                  in Algorithms and Architectures},
  pages =        {349–359},
  numpages =     11,
  keywords =     {robustness, performance, memory reclamation,
                  concurrent algorithms},
  location =     {Pacific Grove, California, USA},
  series =       {SPAA '16}
}

@article{10_1016_j_jpdc_2007_04_010,
  author =       {Hart, Thomas E. and McKenney, Paul E. and Brown,
                  Angela Demke and Walpole, Jonathan},
  title =        {Performance of Memory Reclamation for Lockless
                  Synchronization},
  year =         2007,
  issue_date =   {December, 2007},
  publisher =    {Academic Press, Inc.},
  address =      {USA},
  volume =       67,
  number =       12,
  issn =         {0743-7315},
  url =          {https://doi.org/10.1016/j.jpdc.2007.04.010},
  doi =          {10.1016/j.jpdc.2007.04.010},
  abstract =     {Achieving high performance for concurrent
                  applications on modern multiprocessors remains
                  challenging. Many programmers avoid locking to
                  improve performance, while others replace locks with
                  non-blocking synchronization to protect against
                  deadlock, priority inversion, and convoying. In both
                  cases, dynamic data structures that avoid locking
                  require a memory reclamation scheme that reclaims
                  elements once they are no longer in use. The
                  performance of existing memory reclamation schemes
                  has not been thoroughly evaluated. We conduct the
                  first fair and comprehensive comparison of three
                  recent schemes-quiescent-state-based reclamation,
                  epoch-based reclamation, and hazard-pointer-based
                  reclamation-using a flexible microbenchmark. Our
                  results show that there is no globally optimal
                  scheme. When evaluating lockless synchronization,
                  programmers and algorithm designers should thus
                  carefully consider the data structure, the workload,
                  and the execution environment, each of which can
                  dramatically affect the memory reclamation
                  performance. We discuss the consequences of our
                  results for programmers and algorithm
                  designers. Finally, we describe the use of one
                  scheme, quiescent-state-based reclamation, in the
                  context of an OS kernel-an execution environment
                  which is well suited to this scheme.},
  journal =      {J. Parallel Distrib. Comput.},
  month =        {dec},
  pages =        {1270–1285},
  numpages =     16,
  keywords =     {Lockless, Hazard pointers, Synchronization,
                  Non-blocking, Read-copy update, Memory reclamation,
                  Performance, Concurrency}
}

@inproceedings{10_1145_2592798_2592808,
  author =       {Alistarh, Dan and Eugster, Patrick and Herlihy,
                  Maurice and Matveev, Alexander and Shavit, Nir},
  title =        {StackTrack: An Automated Transactional Approach to
                  Concurrent Memory Reclamation},
  year =         2014,
  isbn =         9781450327046,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2592798.2592808},
  doi =          {10.1145/2592798.2592808},
  abstract =     {Dynamic memory reclamation is arguably the biggest
                  open problem in concurrent data structure design:
                  all known solutions induce high overhead, or must be
                  customized to the specific data structure by the
                  programmer, or both. This paper presents StackTrack,
                  the first concurrent memory reclamation scheme that
                  can be applied automatically by a compiler, while
                  maintaining efficiency. StackTrack eliminates most
                  of the expensive bookkeeping required for memory
                  reclamation by leveraging the power of hardware
                  transactional memory (HTM) in a new way: it tracks
                  thread variables dynamically, and in an atomic
                  fashion. This effectively makes all memory
                  references visible without having threads pay the
                  overhead of writing out this information. Our
                  empirical results show that this new approach
                  matches or outperforms prior, non-automated,
                  techniques.},
  booktitle =    {Proceedings of the Ninth European Conference on
                  Computer Systems},
  articleno =    25,
  numpages =     14,
  location =     {Amsterdam, The Netherlands},
  series =       {EuroSys '14}
}

@inproceedings{10_1109_ISPAN_2005_42,
  author =       {Gidenstam, Anders and Papatriantafilou, Marina and
                  Sundell, Hakan and Tsigas, Philippas},
  title =        {Efficient and Reliable Lock-Free Memory Reclamation
                  Based on Reference Counting},
  year =         2005,
  isbn =         0769525091,
  publisher =    {IEEE Computer Society},
  address =      {USA},
  url =          {https://doi.org/10.1109/ISPAN.2005.42},
  doi =          {10.1109/ISPAN.2005.42},
  abstract =     {We present an efficient and practical lock-free
                  implementation of a memory reclamation scheme based
                  on reference counting, aimed for use with arbitrary
                  lock-free dynamic data structures. The scheme
                  guarantees the safety of local as well as global
                  references, supports arbitrary memory reuse, uses
                  atomic primitives which are available in modern
                  computer systems and provides an upper bound on the
                  memory prevented for reuse. To the best of our
                  knowledge, this is the first lock-free algorithm
                  that provides all of these properties. Experimental
                  results indicate significant performance
                  improvements for lock-free algorithms of dynamic
                  data structures that require strong garbage
                  collection support.},
  booktitle =    {Proceedings of the 8th International Symposium on
                  Parallel Architectures,Algorithms and Networks},
  pages =        {202–207},
  numpages =     6,
  series =       {ISPAN '05}
}

@inproceedings{10_1145_2486159_2486184,
  author =       {Braginsky, Anastasia and Kogan, Alex and Petrank,
                  Erez},
  title =        {Drop the Anchor: Lightweight Memory Management for
                  Non-Blocking Data Structures},
  year =         2013,
  isbn =         9781450315722,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/2486159.2486184},
  doi =          {10.1145/2486159.2486184},
  abstract =     {Efficient memory management of dynamic non-blocking
                  data structures remains an important open
                  question. Existing methods either sacrifice the
                  ability to deallocate objects or reduce performance
                  notably. In this paper, we present a novel
                  technique, called Drop the Anchor, which
                  significantly reduces the overhead associated with
                  the memory management while reclaiming objects even
                  in the presence of thread failures. We demonstrate
                  this memory management scheme on the common linked
                  list data structure. Using extensive evaluation, we
                  show that Drop the Anchor significantly outperforms
                  Hazard Pointers, the widely used technique for
                  non-blocking memory management.},
  booktitle =    {Proceedings of the Twenty-Fifth Annual ACM Symposium
                  on Parallelism in Algorithms and Architectures},
  pages =        {33–42},
  numpages =     10,
  keywords =     {lock-freedom, timestamps, parallel programming,
                  progress guarantee, memory management, hazard
                  pointers, linked list, concurrent data structures,
                  freezing},
  location =     {Montr\'{e}al, Qu\'{e}bec, Canada},
  series =       {SPAA '13}
}

@article{10_1145_1062247_1062249,
  author =       {Herlihy, Maurice and Luchangco, Victor and Martin,
                  Paul and Moir, Mark},
  title =        {Nonblocking Memory Management Support for
                  Dynamic-Sized Data Structures},
  year =         2005,
  issue_date =   {May 2005},
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  volume =       23,
  number =       2,
  issn =         {0734-2071},
  url =          {https://doi.org/10.1145/1062247.1062249},
  doi =          {10.1145/1062247.1062249},
  abstract =     {Conventional dynamic memory management methods
                  interact poorly with lock-free synchronization. In
                  this article, we introduce novel techniques that
                  allow lock-free data structures to allocate and free
                  memory dynamically using any thread-safe memory
                  management library. Our mechanisms are lock-free in
                  the sense that they do not allow a thread to be
                  prevented from allocating or freeing memory by the
                  failure or delay of other threads. We demonstrate
                  the utility of these techniques by showing how to
                  modify the lock-free FIFO queue implementation of
                  Michael and Scott to free unneeded memory. We give
                  experimental results that show that the overhead
                  introduced by such modifications is moderate, and is
                  negligible under low contention.},
  journal =      {ACM Trans. Comput. Syst.},
  month =        {may},
  pages =        {146–196},
  numpages =     51,
  keywords =     {dynamic data structures, Multiprocessors, concurrent
                  data structures, memory management, nonblocking
                  synchronization}
}

@inproceedings{mckenney2001read,
  title =        {Read-copy update},
  author =       {McKenney, Paul E and Appavoo, Jonathan and Kleen,
                  Andi and Krieger, Orran and Russell, Rusty and
                  Sarma, Dipankar and Soni, Maneesh},
  booktitle =    {AUUG Conference Proceedings},
  pages =        175,
  year =         2001,
  organization = {AUUG, Inc.}
}

@inproceedings{DBLP_conf_ipps_Sundell05,
  author =       {H{\aa}kan Sundell},
  title =        {Wait-Free Reference Counting and Memory Management},
  booktitle =    {19th International Parallel and Distributed
                  Processing Symposium {(IPDPS} 2005), {CD-ROM} /
                  Abstracts Proceedings, 4-8 April 2005, Denver, CO,
                  {USA}},
  publisher =    {{IEEE} Computer Society},
  year =         2005,
  url =          {https://doi.org/10.1109/IPDPS.2005.451},
  doi =          {10.1109/IPDPS.2005.451},
  timestamp =    {Wed, 16 Oct 2019 14:14:51 +0200},
  biburl =       {https://dblp.org/rec/conf/ipps/Sundell05.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@inproceedings{DBLP_conf_podc_Valois95,
  author =       {John D. Valois},
  editor =       {James H. Anderson},
  title =        {Lock-Free Linked Lists Using Compare-and-Swap},
  booktitle =    {Proceedings of the Fourteenth Annual {ACM} Symposium
                  on Principles of Distributed Computing, Ottawa,
                  Ontario, Canada, August 20-23, 1995},
  pages =        {214--222},
  publisher =    {{ACM}},
  year =         1995,
  url =          {https://doi.org/10.1145/224964.224988},
  doi =          {10.1145/224964.224988},
  timestamp =    {Tue, 06 Nov 2018 11:07:18 +0100},
  biburl =       {https://dblp.org/rec/conf/podc/Valois95.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@article{DBLP_journals_cacm_BlackburnMGHKBDFFGHHJLMPSVDW08,
  author =       {Stephen M. Blackburn and Kathryn S. McKinley and
                  Robin Garner and Chris Hoffmann and Asjad M. Khan
                  and Rotem Bentzur and Amer Diwan and Daniel Feinberg
                  and Daniel Frampton and Samuel Z. Guyer and Martin
                  Hirzel and Antony L. Hosking and Maria Jump and Han
                  Lee and J. Eliot B. Moss and Aashish Phansalkar and
                  Darko Stefanovic and Thomas VanDrunen and Daniel von
                  Dincklage and Ben Wiedermann},
  title =        {Wake up and smell the coffee: evaluation methodology
                  for the 21st century},
  journal =      {Commun. {ACM}},
  volume =       51,
  number =       8,
  pages =        {83--89},
  year =         2008,
  url =          {https://doi.org/10.1145/1378704.1378723},
  doi =          {10.1145/1378704.1378723},
  timestamp =    {Sat, 24 Nov 2018 11:58:25 +0100},
  biburl =
                  {https://dblp.org/rec/journals/cacm/BlackburnMGHKBDFFGHHJLMPSVDW08.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{KuroseRoss20,
  abstract =     {Motivates readers with a top-down, layered approach
                  to computer networking. Unique among computer
                  networking texts, the book builds on the author's
                  long tradition of teaching this complex subject
                  through a layered approach in a top-down manner. The
                  text works its way from the application layer down
                  toward the physical layer, motivating readers by
                  exposing them to important concepts early in their
                  study of networking. Focusing on the Internet and
                  the fundamentally important issues of networking,
                  this text provides an excellent foundation for
                  readers interested in computer science and
                  electrical engineering, without requiring extensive
                  knowledge of programming or mathematics. The Seventh
                  Edition has been updated to reflect the most
                  important and exciting recent advances in
                  networking.},
  added-at =     {2017-10-31T13:59:45.000+0100},
  address =      {Boston, MA},
  author =       {Kurose, James F. and Ross, Keith W.},
  biburl =
                  {https://www.bibsonomy.org/bibtex/24bba1d8ed8db46b0ab7e62a249b7c4d8/flint63},
  edition =      8,
  groups =       {public},
  interhash =    {d8206be9a754ca1160550d7f378fa153},
  intrahash =    {4bba1d8ed8db46b0ab7e62a249b7c4d8},
  isbn =         {978-0-13-359414-0},
  keywords =     {01841 104 book shelf computer network},
  publisher =    {Pearson},
  title =        {Computer Networking: A Top-Down Approach},
  username =     {flint63},
  year =         2022
}

@book{DBLP_series_synthesis_2018Taubenfeld,
  author =       {Gadi Taubenfeld},
  title =        {Distributed Computing Pearls},
  series =       {Synthesis Lectures on Distributed Computing Theory},
  publisher =    {Morgan {\&} Claypool Publishers},
  year =         2018,
  url =          {https://doi.org/10.2200/S00845ED1V01Y201804DCT014},
  doi =          {10.2200/S00845ED1V01Y201804DCT014},
  timestamp =    {Mon, 27 Aug 2018 16:21:50 +0200},
  biburl =
                  {https://dblp.org/rec/series/synthesis/2018Taubenfeld.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Book{DBLP_books_daglib_0032304,
  author =       {Michel Raynal},
  title =        {Distributed Algorithms for Message-Passing Systems},
  year =         2013,
  publisher =    {Springer},
  isbn =         {978-3-642-38122-5},
  doi =          {10.1007/978-3-642-38123-2},
  url =          {https://doi.org/10.1007/978-3-642-38123-2},
  timestamp =    {Tue, 16 May 2017 14:01:34 +0200},
  biburl =       {https://dblp.org/rec/books/daglib/0032304.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{doi_10_1137_1_9780898719772,
  author =       {Peleg, David},
  title =        {Distributed Computing: A Locality-Sensitive
                  Approach},
  publisher =    {Society for Industrial and Applied Mathematics},
  year =         2000,
  doi =          {10.1137/1.9780898719772},
  URL =
                  {https://epubs.siam.org/doi/abs/10.1137/1.9780898719772},
  eprint =
                  {https://epubs.siam.org/doi/pdf/10.1137/1.9780898719772}
}

@misc{10_48550_arxiv_2001_04235,
  doi =          {10.48550/ARXIV.2001.04235},
  url =          {https://arxiv.org/abs/2001.04235},
  author =       {Aspnes, James},
  keywords =     {Distributed, Parallel, and Cluster Computing
                  (cs.DC), FOS: Computer and information sciences,
                  FOS: Computer and information sciences},
  title =        {Notes on Theory of Distributed Systems},
  publisher =    {arXiv},
  year =         2020,
  copyright =    {Creative Commons Attribution Share Alike 4.0
                  International}
}

@Article{DBLP_journals_jacm_DworkLS88,
  author =       {Cynthia Dwork and Nancy A. Lynch and Larry
                  J. Stockmeyer},
  title =        {Consensus in the presence of partial synchrony},
  journal =      {J. {ACM}},
  year =         1988,
  volume =       35,
  number =       2,
  pages =        {288-323},
  doi =          {10.1145/42282.42283},
  url =          {http://doi.acm.org/10.1145/42282.42283},
  timestamp =    {Wed, 14 Nov 2018 10:35:25 +0100},
  biburl =       {https://dblp.org/rec/journals/jacm/DworkLS88.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_jacm_FischerLP85,
  author =       {Michael J. Fischer and Nancy A. Lynch and Mike
                  Paterson},
  title =        {Impossibility of Distributed Consensus with One
                  Faulty Process},
  journal =      {J. {ACM}},
  year =         1985,
  volume =       32,
  number =       2,
  pages =        {374-382},
  doi =          {10.1145/3149.214121},
  url =          {https://doi.org/10.1145/3149.214121},
  timestamp =    {Wed, 14 Nov 2018 10:35:24 +0100},
  biburl =       {https://dblp.org/rec/journals/jacm/FischerLP85.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Book{DBLP_series_synthesis_2013Scott,
  author =       {Michael L. Scott},
  title =        {Shared-Memory Synchronization},
  year =         2013,
  series =       {Synthesis Lectures on Computer Architecture},
  publisher =    {Morgan {\&} Claypool Publishers},
  isbn =         9781608459568,
  doi =          {10.2200/S00499ED1V01Y201304CAC023},
  url =          {https://doi.org/10.2200/S00499ED1V01Y201304CAC023},
  timestamp =    {Fri, 02 Nov 2018 09:26:54 +0100},
  biburl =       {https://dblp.org/rec/series/synthesis/2013Scott.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_toplas_GottliebLR83,
  author =       {Allan Gottlieb and Boris D. Lubachevsky and Larry
                  Rudolph},
  title =        {Basic Techniques for the Efficient Coordination of
                  Very Large Numbers of Cooperating Sequential
                  Processors},
  journal =      {{ACM} Trans. Program. Lang. Syst.},
  year =         1983,
  volume =       5,
  number =       2,
  pages =        {164-189},
  doi =          {10.1145/69624.357206},
  url =          {https://doi.org/10.1145/69624.357206},
  timestamp =    {Tue, 06 Nov 2018 12:51:29 +0100},
  biburl =
                  {https://dblp.org/rec/journals/toplas/GottliebLR83.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_toplas_OwickiL82,
  author =       {Susan S. Owicki and Leslie Lamport},
  title =        {Proving Liveness Properties of Concurrent Programs},
  journal =      {{ACM} Trans. Program. Lang. Syst.},
  year =         1982,
  volume =       4,
  number =       3,
  pages =        {455-495},
  doi =          {10.1145/357172.357178},
  url =          {https://doi.org/10.1145/357172.357178},
  timestamp =    {Tue, 06 Nov 2018 12:51:29 +0100},
  biburl =       {https://dblp.org/rec/journals/toplas/OwickiL82.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_pldi_FrigoLR98,
  author =       {Matteo Frigo and Charles E. Leiserson and Keith
                  H. Randall},
  title =        {The Implementation of the Cilk-5 Multithreaded
                  Language},
  year =         1998,
  booktitle =    {Proceedings of the {ACM} {SIGPLAN} '98 Conference on
                  Programming Language Design and Implementation
                  (PLDI), Montreal, Canada, June 17-19, 1998},
  pages =        {212-223},
  doi =          {10.1145/277650.277725},
  url =          {https://doi.org/10.1145/277650.277725},
  crossref =     {DBLP:conf/pldi/1998},
  timestamp =    {Thu, 08 Jul 2021 16:04:02 +0200},
  biburl =       {https://dblp.org/rec/conf/pldi/FrigoLR98.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_java_Lea00,
  author =       {Doug Lea},
  title =        {A Java fork/join framework},
  year =         2000,
  booktitle =    {Proceedings of the {ACM} 2000 Java Grande
                  Conference, San Francisco, CA, USA, June 3-5, 2000},
  pages =        {36-43},
  doi =          {10.1145/337449.337465},
  url =          {https://doi.org/10.1145/337449.337465},
  crossref =     {DBLP:conf/java/2000},
  timestamp =    {Tue, 06 Nov 2018 11:07:44 +0100},
  biburl =       {https://dblp.org/rec/conf/java/Lea00.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_toplas_Halstead85,
  author =       {Robert H. Halstead Jr.},
  title =        {Multilisp: {A} Language for Concurrent Symbolic
                  Computation},
  journal =      {{ACM} Trans. Program. Lang. Syst.},
  year =         1985,
  volume =       7,
  number =       4,
  pages =        {501-538},
  doi =          {10.1145/4472.4478},
  url =          {https://doi.org/10.1145/4472.4478},
  timestamp =    {Tue, 06 Nov 2018 12:51:29 +0100},
  biburl =       {https://dblp.org/rec/journals/toplas/Halstead85.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_isca_HerlihyM93,
  author =       {Maurice Herlihy and J. Eliot B. Moss},
  title =        {Transactional Memory: Architectural Support for
                  Lock-Free Data Structures},
  year =         1993,
  booktitle =    {Proceedings of the 20th Annual International
                  Symposium on Computer Architecture, San Diego, CA,
                  USA, May 1993},
  pages =        {289-300},
  doi =          {10.1145/165123.165164},
  url =          {https://doi.org/10.1145/165123.165164},
  crossref =     {DBLP:conf/isca/1993},
  timestamp =    {Fri, 09 Jul 2021 15:51:20 +0200},
  biburl =       {https://dblp.org/rec/conf/isca/HerlihyM93.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@InProceedings{DBLP_conf_asplos_CullerSSEW91,
  author =       {David E. Culler and Anurag Sah and Klaus E. Schauser
                  and Thorsten von Eicken and John Wawrzynek},
  title =        {Fine-Grain Parallelism with Minimal Hardware
                  Support: {A} Compiler-Controlled Threaded Abstract
                  Machine},
  year =         1991,
  booktitle =    {{ASPLOS-IV} Proceedings - Forth International
                  Conference on Architectural Support for Programming
                  Languages and Operating Systems, Santa Clara,
                  California, USA, April 8-11, 1991},
  pages =        {164-175},
  doi =          {10.1145/106972.106990},
  url =          {https://doi.org/10.1145/106972.106990},
  crossref =     {DBLP:conf/asplos/1991},
  timestamp =    {Wed, 07 Jul 2021 13:23:09 +0200},
  biburl =       {https://dblp.org/rec/conf/asplos/CullerSSEW91.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@Article{DBLP_journals_tpds_ChenG013,
  author =       {Quan Chen and Minyi Guo and Zhiyi Huang},
  title =        {Adaptive Cache Aware Bitier Work-Stealing in
                  Multisocket Multicore Architectures},
  journal =      {{IEEE} Trans. Parallel Distributed Syst.},
  year =         2013,
  volume =       24,
  number =       12,
  pages =        {2334-2343},
  doi =          {10.1109/TPDS.2012.322},
  url =          {https://doi.org/10.1109/TPDS.2012.322},
  timestamp =    {Fri, 02 Oct 2020 14:39:59 +0200},
  biburl =       {https://dblp.org/rec/journals/tpds/ChenG013.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@misc{arxiv_2205_06323,
  doi =          {10.48550/ARXIV.2205.06323},
  url =          {https://arxiv.org/abs/2205.06323},
  author =       {Castañeda, Armando and Piña, Miguel},
  keywords =     {Distributed, Parallel, and Cluster Computing
                  (cs.DC), FOS: Computer and information sciences,
                  FOS: Computer and information sciences},
  title =        {Modular Baskets Queue},
  publisher =    {arXiv},
  year =         2022,
  copyright =    {Creative Commons Attribution Non Commercial No
                  Derivatives 4.0 International},
  howpublished = {ArXiv.org},
  note =         {\url{https://arxiv.org/abs/2205.06323}}
}

@book{bass2021software,
  title =        {Software Architecture in Practice, 4th Edition},
  author =       {Bass, L. and Clements, P. and Kazman, R. and Safari,
                  an O'Reilly Media Company},
  isbn =         9780136885979,
  series =       {SEI series in software engineering},
  url =          {https://books.google.com.mx/books?id=BWpuzgEACAAJ},
  year =         2021,
  publisher =    {Addison-Wesley Professional}
}

@misc{ibmIBM100Power,
  title =        {{I}{B}{M}100 - {P}ower 4 : {T}he {F}irst
                  {M}ulti-{C}ore, 1{G}{H}z {P}rocessor --- ibm.com},
  howpublished =
                  {\url{https://www.ibm.com/ibm/history/ibm100/us/en/icons/power4/#:~:text=In%202001%2C%20IBM%20introduced%20the,more%20than%20170%20million%20transistors.}},
  note =         {[Accessed 02-Jan-2023]},
}

@InProceedings{DBLP_conf_concur_HaasHHKLPSSV16,
  author =       {Andreas Haas and Thomas A. Henzinger and Andreas
                  Holzer and Christoph M. Kirsch and Michael Lippautz
                  and Hannes Payer and Ali Sezgin and Ana Sokolova and
                  Helmut Veith},
  title =        {Local Linearizability for Concurrent Container-Type
                  Data Structures},
  year =         2016,
  booktitle =    {27th International Conference on Concurrency Theory,
                  {CONCUR} 2016, August 23-26, 2016, Qu{\'{e}}bec
                  City, Canada},
  pages =        {6:1--6:15},
  doi =          {10.4230/LIPIcs.CONCUR.2016.6},
  url =          {https://doi.org/10.4230/LIPIcs.CONCUR.2016.6},
  crossref =     {DBLP:conf/concur/2016},
  timestamp =    {Fri, 27 Mar 2020 08:51:56 +0100},
  biburl =       {https://dblp.org/rec/conf/concur/HaasHHKLPSSV16.bib},
  bibsource =    {dblp computer science bibliography,
                  https://dblp.org}
}

@book{lilja2005measuring,
  author       = {Lilja, David J.},
  title        = {Measuring Computer Performance},
  year         = 2000,
  month        = {Jul},
  doi          = {10.1017/cbo9780511612398},
  url          = {http://dx.doi.org/10.1017/cbo9780511612398},
  ISBN         = 9780511612398,
  publisher    = {Cambridge University Press}
}