#+title: Notes about concurrent computing
#+author: Miguel Angel Pi√±a Avelino
#+date: \today

* Setup                                                            :noexport:

** Startup

   #+startup: noptag overview hideblocks


** Org LaTeX Setup

   #+latex_class: tufte-book
   #+latex_class_options: [openany, a4paper]
   #+latex_header: \usepackage{amsmath,amssymb,amsthm,geometry,hyperref,paralist,svg,thmtools,tikz,tikz-cd}
   #+latex_header: \usepackage{mathtools}
   #+latex_header: \usepackage[capitalise,noabbrev]{cleveref}
   #+latex_header: \usepackage{environ} \NewEnviron{abmn}{\marginnote{\BODY}}
   #+latex_header: \setcounter{tocdepth}{1}
   #+latex_header: \newtheorem{theorem}{Theorem}
   #+latex_header: \newtheorem{example}[theorem]{Example}
   #+latex_header: \newtheorem{exmpl}[theorem]{Example}
   #+latex_header: \newtheorem{definition}[theorem]{Definition}
   #+latex_header: \newtheorem{proposition}[theorem]{Proposition}
   #+latex_header: \newtheorem{lemma}[theorem]{Lemma}
   #+latex_header: \newtheorem{exercise}[theorem]{Exercise}
   #+latex_header: \usetikzlibrary{arrows,automata,positioning}


** Export settings

   Export into the artifacts directory
   #+export_file_name: artifacts/notes

   Add ~tufte-book~ to ~org-latex-classes~ and update ~org-latex-pdf-process~.
   #+name: export-setup
   #+begin_src emacs-lisp :results silent :var this-year="2022"
     (add-to-list 'org-latex-classes
                  `("tufte-book"
                    ,(string-join
                      '("\\documentclass{tufte-book}"
                        "\\usepackage{color}"
                        "\\usepackage{amsmath,amssymb}")
                      "\n")
                    ("\\chapter{%s}" . "\\chapter*{%s}")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

     (setq-local org-latex-pdf-process
                 (let
                     ((cmd (concat "pdflatex -shell-escape -interaction nonstopmode"
                                   " --synctex=1"
                                   " -output-directory %o %f")))
                   (list cmd
                         "cd %o; if test -r %b.idx; then makeindex %b.idx; fi"
                         "cd %o; bibtex %b"
                         cmd
                         cmd
                         "mv *.svg %o/"
                         "rm -rf %o/svg-inkscape"
                         "mv svg-inkscape %o/"
                         "rm -rf *.{aux,bbl,blg,fls,out,log,toc}"
                         (concat "cp %o/%b.pdf ../docs/" this-year "/notes-concurrent.pdf"))))

     (setq-local org-latex-subtitle-format "\\\\\\medskip
             \\noindent\\Huge %s")
     (setq-local org-confirm-babel-evaluate nil)
   #+end_src


* Introduction

  We begin by briefly introducing some language to talk about the objects we
  will encounter in this course.  We will revisit this foundational material
  several times throughout the course in several contexts.

** Sets

   Informally, a /set/ is an unordered collection of objects with no repetitions.
   This is the most basic object usually used to discuss almost every
   construction in mathematics.  If \(T\) is a set and \(x\) is any object, we
   have the following dichotomy[fn:dichotomy]: either \(x\) is an element of
   \(T\), denoted \(x \in T\), or \(x\) is not an element of \(T\), denoted \(x
   \notin T\).  Two sets are equal if and only if they have the same elements.
   That is, every element of the first set is an element of the second set, and
   vice versa.
* Footnotes

[fn:binary] Writing a positive integer \(n\) as the sum of distinct powers of two is also called /binary writing/. There are several ways to obtain it. For example, we can follow the following recursive algorithm: if \(n\) is even, we write it as \(2m\), and if \(n\) is odd, we write it as \(2m + 1\). Repeating the process on the \(m\) obtained until we reach \(1\), we obtain an expression which expands to a sum of distinct powers of two. For example,
\begin{align*}
7 &= 2(3)+1 = 2(2(1)+1)+1\\
&= 4 + 2 + 1.
\end{align*}

[fn:infty] We use the symbol \(\infty\) as a placeholder for an extremely large number: for any real number \(r\) in our calculations, we  will set \(r + \infty = \infty\) and \(\operatorname{min}\{r,\infty\} = r\).


[fn:partition] If \(S = S_1 \cup \cdots \cup S_n\), we say that it is a /partition/ if \(S_i \cap S_j = \emptyset\) for \(i \neq j\). In this case we write \(S = S_1 \sqcup \cdots \sqcup S_n\), or more concisely, \(S = \bigsqcup_{i = 1}^n S_i\).

[fn:closures] Think about when it makes sense to ask for the closure of a relation with respect to a property, and when you can expect it to exist uniquely. For example, it doesn't really make sense to ask for the anti-symmetric closure of a relation. Do you see why?

[fn:equiv-classes] The idea is that we can treat all elements of one equivalence class as being interchangeable in some sense.

[fn:vacuous] We say that a statement of type "if ... then ...", or equivalently "for every ... we have ..." is /vacuously true/ if nothing satisfies the "if" or "for every" condition.

[fn:nary-rel] This is a binary relation because we are looking at a subset of the product of two copies of \(S\). An \(n\)-ary relation on \(S\) would just be a subset of the product of \(n\) copies of \(S\).

[fn:dichotomy] A situation in which exactly one of two possible options is true.

[fn:set-naming-convention] This is just a convention. In fact, sets are often elements of other sets, so there is no clear distinction between sets and potential elements.

[fn:zfc] Historical remarks and something about ZFC?

* Local variables                                                  :noexport:
# Local variables:
# eval: (add-hook 'org-export-before-processing-hook (lambda (be) (org-babel-ref-resolve "export-setup")) nil t)
# End:
